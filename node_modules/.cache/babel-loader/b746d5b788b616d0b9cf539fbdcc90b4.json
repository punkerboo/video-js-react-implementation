{"ast":null,"code":"var _jsxFileName = \"C:\\\\test_website\\\\ninjasatnoon\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport VideoJS from './VideoJS'; // point to where the functional component is stored\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const playerRef = React.useRef(null);\n  const videoJsOptions = {\n    // lookup the options in the docs for more options\n    autoplay: true,\n    controls: true,\n    responsive: true,\n    fluid: true,\n    sources: [{\n      src: '/path/to/video.mp4',\n      type: 'video/mp4'\n    }]\n  };\n\n  const handlePlayerReady = player => {\n    playerRef.current = player; // you can handle player events here\n\n    player.on('waiting', () => {\n      console.log('player is waiting');\n    });\n    player.on('dispose', () => {\n      console.log('player will dispose');\n    });\n  }; // const changePlayerOptions = () => {\n  //   // you can update the player through the Video.js player instance\n  //   if (!playerRef.current) {\n  //     return;\n  //   }\n  //   // [update player through instance's api]\n  //   playerRef.current.src([{src: 'http://ex.com/video.mp4', type: 'video/mp4'}]);\n  //   playerRef.current.autoplay(false);\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Rest of app here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideoJS, {\n      options: videoJsOptions,\n      onReady: handlePlayerReady\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Rest of app here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"ezlvRaRDG1HW7XN2TkWUyOHHTRM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/src/App.js"],"names":["React","VideoJS","App","playerRef","useRef","videoJsOptions","autoplay","controls","responsive","fluid","sources","src","type","handlePlayerReady","player","current","on","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAAgC;;;;;AAEhC,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,SAAS,GAAGH,KAAK,CAACI,MAAN,CAAa,IAAb,CAAlB;AAEA,QAAMC,cAAc,GAAG;AAAE;AACvBC,IAAAA,QAAQ,EAAE,IADW;AAErBC,IAAAA,QAAQ,EAAE,IAFW;AAGrBC,IAAAA,UAAU,EAAE,IAHS;AAIrBC,IAAAA,KAAK,EAAE,IAJc;AAKrBC,IAAAA,OAAO,EAAE,CAAC;AACRC,MAAAA,GAAG,EAAE,oBADG;AAERC,MAAAA,IAAI,EAAE;AAFE,KAAD;AALY,GAAvB;;AAWA,QAAMC,iBAAiB,GAAIC,MAAD,IAAY;AACpCX,IAAAA,SAAS,CAACY,OAAV,GAAoBD,MAApB,CADoC,CAGpC;;AACAA,IAAAA,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAFD;AAIAJ,IAAAA,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAFD;AAGD,GAXD,CAdgB,CA2BhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEb,cAAlB;AAAkC,MAAA,OAAO,EAAEQ;AAA3C;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AASD,CA9CD;;GAAMX,G;;KAAAA,G","sourcesContent":["import React from \"react\";\nimport VideoJS from './VideoJS' // point to where the functional component is stored\n\nconst App = () => {\n  const playerRef = React.useRef(null);\n\n  const videoJsOptions = { // lookup the options in the docs for more options\n    autoplay: true,\n    controls: true,\n    responsive: true,\n    fluid: true,\n    sources: [{\n      src: '/path/to/video.mp4',\n      type: 'video/mp4'\n    }]\n  }\n\n  const handlePlayerReady = (player) => {\n    playerRef.current = player;\n\n    // you can handle player events here\n    player.on('waiting', () => {\n      console.log('player is waiting');\n    });\n\n    player.on('dispose', () => {\n      console.log('player will dispose');\n    });\n  };\n\n  // const changePlayerOptions = () => {\n  //   // you can update the player through the Video.js player instance\n  //   if (!playerRef.current) {\n  //     return;\n  //   }\n  //   // [update player through instance's api]\n  //   playerRef.current.src([{src: 'http://ex.com/video.mp4', type: 'video/mp4'}]);\n  //   playerRef.current.autoplay(false);\n  // };\n\n  return (\n    <>\n      <div>Rest of app here</div>\n\n      <VideoJS options={videoJsOptions} onReady={handlePlayerReady} />\n\n      <div>Rest of app here</div>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}