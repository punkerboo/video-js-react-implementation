{"ast":null,"code":"var _jsxFileName = \"C:\\\\test_website\\\\ninjasatnoon\\\\src\\\\videoPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  fill: true,\n  fluid: true,\n  responsive: true,\n  preload: \"auto\",\n  controls: true,\n  html5: {\n    vhs: {\n      enableLowInitialPlaylist: false,\n      smoothQualityChange: true,\n      overrideNative: true\n    }\n  },\n  playbackRates: [0.25, 0.5],\n  sourceOrder: true\n};\nexport default function VideoViewer(props) {\n  _s();\n\n  const {\n    src,\n    controls,\n    autoplay\n  } = props; //const classes = useStyles();\n\n  const videoRef = useRef(null);\n  const [player, setPlayer] = useState(null);\n  useEffect(() => {\n    const videoPlayer = videojs(videoRef.current, options);\n    setPlayer(videoPlayer);\n    return () => videoPlayer.dispose();\n  }, []);\n  useEffect(() => {\n    if (player !== null) {\n      player.src([{\n        src,\n        type: \"video/mp4\"\n      }]);\n    }\n  }, [src, player]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-vjs-player\": true,\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      className: \"video-js vjs-big-play-centered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VideoViewer, \"fBiinjDIR8lQ3GfaeS/AvYQwt0Y=\");\n\n_c = VideoViewer;\nVideoViewer.propTypes = {\n  src: PropTypes.string.isRequired,\n  controls: PropTypes.bool.isRequired,\n  autoplay: PropTypes.bool.isRequired\n};\nVideoViewer.defaultProps = {\n  controls: false,\n  autoplay: true\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoViewer\");","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/src/videoPlayer.js"],"names":["React","useEffect","useRef","useState","PropTypes","videojs","options","fill","fluid","responsive","preload","controls","html5","vhs","enableLowInitialPlaylist","smoothQualityChange","overrideNative","playbackRates","sourceOrder","VideoViewer","props","src","autoplay","videoRef","player","setPlayer","videoPlayer","current","dispose","type","propTypes","string","isRequired","bool","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,gCAAP;;AAEA,MAAMC,OAAO,GAAG;AAChBC,EAAAA,IAAI,EAAE,IADU;AAEhBC,EAAAA,KAAK,EAAE,IAFS;AAGhBC,EAAAA,UAAU,EAAE,IAHI;AAIhBC,EAAAA,OAAO,EAAE,MAJO;AAKhBC,EAAAA,QAAQ,EAAE,IALM;AAMhBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE;AACJC,MAAAA,wBAAwB,EAAE,KADtB;AAEHC,MAAAA,mBAAmB,EAAE,IAFlB;AAGHC,MAAAA,cAAc,EAAE;AAHb;AADA,GANS;AAahBC,EAAAA,aAAa,EAAE,CAAC,IAAD,EAAO,GAAP,CAbC;AAchBC,EAAAA,WAAW,EAAE;AAdG,CAAhB;AAiBA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACzC,QAAM;AAAEC,IAAAA,GAAF;AAAOV,IAAAA,QAAP;AAAkBW,IAAAA;AAAlB,MAA8BF,KAApC,CADyC,CAEzC;;AACA,QAAMG,QAAQ,GAAGrB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,IAAD,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,WAAW,GAAGrB,OAAO,CAACkB,QAAQ,CAACI,OAAV,EAAmBrB,OAAnB,CAA3B;AACAmB,IAAAA,SAAS,CAACC,WAAD,CAAT;AAEA,WAAO,MAAMA,WAAW,CAACE,OAAZ,EAAb;AACD,GALQ,EAKN,EALM,CAAT;AAOA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,MAAM,KAAK,IAAf,EAAqB;AACnBA,MAAAA,MAAM,CAACH,GAAP,CAAW,CACT;AACEA,QAAAA,GADF;AAEEQ,QAAAA,IAAI,EAAE;AAFR,OADS,CAAX;AAMD;AACF,GATQ,EASN,CAACR,GAAD,EAAMG,MAAN,CATM,CAAT;AAWA,sBACE;AAAK,2BAAL;AAAA,2BACE;AAAO,MAAA,GAAG,EAAED,QAAZ;AAAsB,MAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7BuBJ,W;;KAAAA,W;AA+BxBA,WAAW,CAACW,SAAZ,GAAwB;AACtBT,EAAAA,GAAG,EAAEjB,SAAS,CAAC2B,MAAV,CAAiBC,UADA;AAEtBrB,EAAAA,QAAQ,EAAEP,SAAS,CAAC6B,IAAV,CAAeD,UAFH;AAGtBV,EAAAA,QAAQ,EAAElB,SAAS,CAAC6B,IAAV,CAAeD;AAHH,CAAxB;AAMAb,WAAW,CAACe,YAAZ,GAA2B;AACzBvB,EAAAA,QAAQ,EAAE,KADe;AAEzBW,EAAAA,QAAQ,EAAE;AAFe,CAA3B","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport videojs from \"video.js\";\r\nimport \"video.js/dist/video-js.min.css\";\r\n\r\nconst options = {\r\nfill: true,\r\nfluid: true,\r\nresponsive: true,\r\npreload: \"auto\",\r\ncontrols: true,\r\nhtml5: {\r\n  vhs: {\r\n   enableLowInitialPlaylist: false,\r\n    smoothQualityChange: true,\r\n    overrideNative: true\r\n  }\r\n},\r\nplaybackRates: [0.25, 0.5],\r\nsourceOrder: true\r\n};\r\n\r\nexport default function VideoViewer(props) {\r\n  const { src, controls,  autoplay} = props;\r\n  //const classes = useStyles();\r\n  const videoRef = useRef(null);\r\n  const [player, setPlayer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const videoPlayer = videojs(videoRef.current, options);\r\n    setPlayer(videoPlayer);\r\n\r\n    return () => videoPlayer.dispose();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (player !== null) {\r\n      player.src([\r\n        {\r\n          src,\r\n          type: \"video/mp4\"\r\n        }\r\n      ]);\r\n    }\r\n  }, [src, player]);\r\n\r\n  return (\r\n    <div data-vjs-player>\r\n      <video ref={videoRef} className=\"video-js vjs-big-play-centered\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nVideoViewer.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  controls: PropTypes.bool.isRequired,\r\n  autoplay: PropTypes.bool.isRequired,\r\n};\r\n\r\nVideoViewer.defaultProps = {\r\n  controls: false,\r\n  autoplay: true,\r\n};"]},"metadata":{},"sourceType":"module"}