{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\n\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n  return ret;\n};\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\n\n\nvar textTracksToJson = function textTracksToJson(tech) {\n  var trackEls = tech.$$('track');\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n\n    return json;\n  });\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\n\n\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n  return tech.textTracks();\n};\n\nexports['default'] = {\n  textTracksToJson: textTracksToJson,\n  jsonToTextTracks: jsonToTextTracks,\n  trackToJson_: trackToJson_\n};","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/tracks/text-track-list-converter.js"],"names":["exports","__esModule","trackToJson_","track","ret","reduce","acc","prop","i","cues","Array","prototype","map","call","cue","startTime","endTime","text","id","textTracksToJson","tech","trackEls","$$","trackObjs","t","tracks","trackEl","json","src","concat","filter","textTracks","indexOf","jsonToTextTracks","forEach","addedTrack","addRemoteTextTrack","addCue"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n\n  return ret;\n};\n\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\nvar textTracksToJson = function textTracksToJson(tech) {\n\n  var trackEls = tech.$$('track');\n\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n    return json;\n  });\n\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n\n  return tech.textTracks();\n};\n\nexports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };\n"]},"metadata":{},"sourceType":"script"}