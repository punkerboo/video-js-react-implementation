{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _dom = require('./utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _guid = require('./utils/guid.js');\n\nvar Guid = _interopRequireWildcard(_guid);\n\nvar _events = require('./utils/events.js');\n\nvar Events = _interopRequireWildcard(_events);\n\nvar _log = require('./utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _toTitleCase = require('./utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _mergeOptions = require('./utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\n\n\nvar Component = function () {\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   #\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    _classCallCheck(this, Component); // The component might be the player itself and we can't pass `this` to super\n\n\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    } // Make a copy of prototype.options_ to protect against overriding defaults\n\n\n    this.options_ = (0, _mergeOptions2['default'])({}, this.options_); // Updated options with supplied options\n\n    options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options); // Get ID from options or options element if one is supplied\n\n    this.id_ = options.id || options.el && options.el.id; // If there was no ID from the options, generate one\n\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n      this.id_ = id + '_component_' + Guid.newGUID();\n    }\n\n    this.name_ = options.name || null; // Create element if one wasn't provided in options\n\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {}; // Add any child components in options\n\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready); // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Component.prototype.dispose = function dispose() {\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({\n      type: 'dispose',\n      bubbles: false\n    }); // Dispose all children.\n\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    } // Delete child references\n\n\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null; // Remove all event listeners.\n\n    this.off(); // Remove element from DOM\n\n    if (this.el_.parentNode) {\n      this.el_.parentNode.removeChild(this.el_);\n    }\n\n    Dom.removeElData(this.el_);\n    this.el_ = null;\n  };\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.prototype.options = function options(obj) {\n    _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);\n    return this.options_;\n  };\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Component.prototype.createEl = function createEl(tagName, properties, attributes) {\n    return Dom.createEl(tagName, properties, attributes);\n  };\n  /**\n   * Localize a string given the string in english.\n   *\n   * @param {string} string\n   *        The string to localize.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n\n  Component.prototype.localize = function localize(string) {\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n\n    if (!code || !languages) {\n      return string;\n    }\n\n    var language = languages[code];\n\n    if (language && language[string]) {\n      return language[string];\n    }\n\n    var primaryCode = code.split('-')[0];\n    var primaryLang = languages[primaryCode];\n\n    if (primaryLang && primaryLang[string]) {\n      return primaryLang[string];\n    }\n\n    return string;\n  };\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n    return this.childNameIndex_[name];\n  };\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n    var component = void 0;\n    var componentName = void 0; // If child is a string, create component with options\n\n    if (typeof child === 'string') {\n      componentName = (0, _toTitleCase2['default'])(child); // Options can also be specified as a boolean,\n      // so convert to an empty object if false.\n\n      if (!options) {\n        options = {};\n      } // Same as above, but true is deprecated so show a warning.\n\n\n      if (options === true) {\n        _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');\n\n        options = {};\n      }\n\n      var componentClassName = options.componentClass || componentName; // Set name through options\n\n      options.name = componentName; // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      } // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n\n\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options); // child is a component instance\n    } else {\n      component = child;\n    }\n\n    this.children_.splice(index, 0, component);\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    } // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n\n\n    componentName = componentName || component.name && (0, _toTitleCase2['default'])(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    } // Add the UI object's element to the container div (box)\n    // Having an element is not required\n\n\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n      this.contentEl().insertBefore(component.el(), refNode);\n    } // Return so it can stored on parent object if desired.\n\n\n    return component;\n  };\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts; // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        } // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n\n\n        if (opts === false) {\n          return;\n        } // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n\n\n        if (opts === true) {\n          opts = {};\n        } // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n\n\n        opts.playerOptions = _this.options_.playerOptions; // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      }; // Allow for an array of children details to passed in the options\n\n\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return {\n          name: name,\n          opts: opts\n        };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n  /**\n   * Add an `event listener` to this `Component`s element.\n   *\n   * The benefit of using this over the following:\n   * - `VjsEvents.on(otherElement, 'eventName', myFunc)`\n   * - `otherComponent.on('eventName', myFunc)`\n   *\n   * 1. Is that the listeners will get cleaned up when either component gets disposed.\n   * 1. It will also bind `myComponent` as the context of `myFunc`.\n   * > NOTE: If you remove the element from the DOM that has used `on` you need to\n   *         clean up references using: `myComponent.trigger(el, 'dispose')`\n   *         This will also allow the browser to garbage collect it. In special\n   *         cases such as with `window` and `document`, which are both permanent,\n   *         this is not necessary.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @listens Component#dispose\n   */\n\n\n  Component.prototype.on = function on(first, second, third) {\n    var _this2 = this;\n\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.on(this.el_, first, Fn.bind(this, second)); // Targeting another component or element\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third); // When this component is disposed, remove the listener from the other component\n\n      var removeOnDispose = function removeOnDispose() {\n        return _this2.off(target, type, fn);\n      }; // Use the same function ID so we can remove it later it using the ID\n      // of the original listener\n\n\n      removeOnDispose.guid = fn.guid;\n      this.on('dispose', removeOnDispose); // If the other component is disposed first we need to clean the reference\n      // to the other component in this component's removeOnDispose listener\n      // Otherwise we create a memory leak.\n\n      var cleanRemover = function cleanRemover() {\n        return _this2.off('dispose', removeOnDispose);\n      }; // Add the same function ID so we can easily remove it later\n\n\n      cleanRemover.guid = fn.guid; // Check if this is a DOM node\n\n      if (first.nodeName) {\n        // Add the listener to the other element\n        Events.on(target, type, fn);\n        Events.on(target, 'dispose', cleanRemover); // Should be a component\n        // Not using `instanceof Component` because it makes mock players difficult\n      } else if (typeof first.on === 'function') {\n        // Add the listener to the other component\n        target.on(type, fn);\n        target.on('dispose', cleanRemover);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Remove an event listener from this `Component`s element. If the second argument is\n   * exluded all listeners for the type passed in as the first argument will be removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.off = function off(first, second, third) {\n    if (!first || typeof first === 'string' || Array.isArray(first)) {\n      Events.off(this.el_, first, second);\n    } else {\n      var target = first;\n      var type = second; // Ensure there's at least a guid, even if the function hasn't been used\n\n      var fn = Fn.bind(this, third); // Remove the dispose listener on this component,\n      // which was given the same guid as the event listener\n\n      this.off('dispose', fn);\n\n      if (first.nodeName) {\n        // Remove the listener\n        Events.off(target, type, fn); // Remove the listener for cleaning the dispose listener\n\n        Events.off(target, 'dispose', fn);\n      } else {\n        target.off(type, fn);\n        target.off('dispose', fn);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Add an event listener that gets triggered only once and then gets removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.one = function one(first, second, third) {\n    var _this3 = this,\n        _arguments = arguments;\n\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.one(this.el_, first, Fn.bind(this, second));\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n\n      var newFunc = function newFunc() {\n        _this3.off(target, type, newFunc);\n\n        fn.apply(null, _arguments);\n      }; // Keep the same function ID so we can remove it later\n\n\n      newFunc.guid = fn.guid;\n      this.on(target, type, newFunc);\n    }\n\n    return this;\n  };\n  /**\n   * Trigger an event on an element.\n   *\n   * @param {EventTarget~Event|Object|string} event\n   *        The event name, and Event, or an event-like object with a type attribute\n   *        set to the event name.\n   *\n   * @param {Object} [hash]\n   *        Data hash to pass along with the event\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.trigger = function trigger(event, hash) {\n    Events.trigger(this.el_, event, hash);\n    return this;\n  };\n  /**\n   * Bind a listener to the component's ready state. If the ready event has already\n   * happened it will trigger the function immediately.\n   *\n   * @param  {Component~ReadyCallback} fn\n   *         A function to call when ready is triggered.\n   *\n   * @param  {boolean} [sync=false]\n   *         Execute the listener synchronously if `Component` is ready.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (fn) {\n      if (this.isReady_) {\n        if (sync) {\n          fn.call(this);\n        } else {\n          // Call the function asynchronously by default for consistency\n          this.setTimeout(fn, 1);\n        }\n      } else {\n        this.readyQueue_ = this.readyQueue_ || [];\n        this.readyQueue_.push(fn);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true; // Ensure ready is triggerd asynchronously\n\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_; // Reset Ready Queue\n\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      } // Allow for using event listeners also\n\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n\n\n      this.trigger('ready');\n    }, 1);\n  };\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$ = function $(selector, context) {\n    return Dom.$(selector, context || this.contentEl());\n  };\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$$ = function $$(selector, context) {\n    return Dom.$$(selector, context || this.contentEl());\n  };\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n\n  Component.prototype.hasClass = function hasClass(classToCheck) {\n    return Dom.hasElClass(this.el_, classToCheck);\n  };\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.addClass = function addClass(classToAdd) {\n    Dom.addElClass(this.el_, classToAdd);\n    return this;\n  };\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.removeClass = function removeClass(classToRemove) {\n    Dom.removeElClass(this.el_, classToRemove);\n    return this;\n  };\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {\n    Dom.toggleElClass(this.el_, classToToggle, predicate);\n    return this;\n  };\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n    return this;\n  };\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n    return this;\n  };\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n    return this;\n  };\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n    return this;\n  };\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n\n  Component.prototype.getAttribute = function getAttribute(attribute) {\n    return Dom.getAttribute(this.el_, attribute);\n  };\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n\n  Component.prototype.setAttribute = function setAttribute(attribute, value) {\n    Dom.setAttribute(this.el_, attribute, value);\n    return this;\n  };\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n\n  Component.prototype.removeAttribute = function removeAttribute(attribute) {\n    Dom.removeAttribute(this.el_, attribute);\n    return this;\n  };\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip resize listeners on width for optimization\n    return this.width(width, true).height(height);\n  };\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#resize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip resize event trigger\n   *\n   * @return {Component}\n   *         - the dimension when getting or 0 if unset\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      } // Check if using css width/height (% or px) and adjust\n\n\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      } // skipListeners allows us to avoid triggering the resize event when setting both width and height\n\n\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#resize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('resize');\n      } // Return component\n\n\n      return this;\n    } // Not setting a value, so getting it\n    // Make sure element exists\n\n\n    if (!this.el_) {\n      return 0;\n    } // Get dimension value from style\n\n\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    } // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n\n\n    return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);\n  };\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof _window2['default'].getComputedStyle === 'function') {\n      var computedStyle = _window2['default'].getComputedStyle(this.el_);\n\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    } // remove 'px' from variable and parse as integer\n\n\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight); // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.\n\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  };\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n  /**\n   * Set the focus to this component\n   */\n\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n  /**\n   * Remove the focus from this component\n   */\n\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null; // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n\n    var tapMovementThreshold = 10; // The maximum length a touch can be while still being considered a tap\n\n    var touchTimeThreshold = 200;\n    var couldBeTap = void 0;\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        }; // Record start time so we can detect a tap vs. \"touch and hold\"\n\n        touchStart = new Date().getTime(); // Reset couldBeTap tracking\n\n        couldBeTap = true;\n      }\n    });\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    }; // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n\n\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap); // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n\n    this.on('touchend', function (event) {\n      firstTouch = null; // Proceed only if the touchmove/leave/cancel event didn't happen\n\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart; // Make sure the touch was less than the threshold to be considered a tap\n\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('tap'); // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    } // listener for reporting that the user is active\n\n\n    var report = Fn.bind(this.player(), this.player().reportUserActivity);\n    var touchHolding = void 0;\n    this.on('touchstart', function () {\n      report(); // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n\n      this.clearInterval(touchHolding); // report at the same interval as activityCheck\n\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report(); // stop the interval that maintains activity if the touch is holding\n\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose}.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    fn = Fn.bind(this, fn);\n\n    var timeoutId = _window2['default'].setTimeout(fn, timeout);\n\n    var disposeFn = function disposeFn() {\n      this.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n    this.on('dispose', disposeFn);\n    return timeoutId;\n  };\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    _window2['default'].clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n    this.off('dispose', disposeFn);\n    return timeoutId;\n  };\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    fn = Fn.bind(this, fn);\n\n    var intervalId = _window2['default'].setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      this.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n    this.on('dispose', disposeFn);\n    return intervalId;\n  };\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    _window2['default'].clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n    this.off('dispose', disposeFn);\n    return intervalId;\n  };\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} comp\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n\n  Component.registerComponent = function registerComponent(name, comp) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    if (name === 'Player' && Component.components_[name]) {\n      var Player = Component.components_[name]; // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n\n      if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {\n        return Player.players[playerName];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created');\n      }\n    }\n\n    Component.components_[name] = comp;\n    return comp;\n  };\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n\n    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {\n      _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');\n\n      return _window2['default'].videojs[name];\n    }\n  };\n  /**\n   * Sets up the constructor using the supplied init method or uses the init of the\n   * parent object.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties.\n   *\n   * @return {Object}\n   *         the extended object.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.extend = function extend(props) {\n    props = props || {};\n\n    _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead'); // Set up the constructor using the supplied init method\n    // or using the init of the parent object\n    // Make sure to check the unobfuscated version for external libs\n\n\n    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {}; // In Resig's simple class inheritance (previously used) the constructor\n    //  is a function that calls `this.init.apply(arguments)`\n    // However that would prevent us from using `ParentObject.call(this);`\n    //  in a Child constructor because the `this` in `this.init`\n    //  would still refer to the Child and cause an infinite loop.\n    // We would instead have to do\n    //    `ParentObject.prototype.init.apply(this, arguments);`\n    //  Bleh. We're not creating a _super() function, so it's good to keep\n    //  the parent constructor reference simple.\n\n\n    var subObj = function subObj() {\n      init.apply(this, arguments);\n    }; // Inherit from this object's prototype\n\n\n    subObj.prototype = Object.create(this.prototype); // Reset the constructor property for subObj otherwise\n    // instances of subObj would have the constructor of the parent Object\n\n    subObj.prototype.constructor = subObj; // Make the class extendable\n\n    subObj.extend = Component.extend; // Extend subObj's prototype with functions and other properties from props\n\n    for (var name in props) {\n      if (props.hasOwnProperty(name)) {\n        subObj.prototype[name] = props[name];\n      }\n    }\n\n    return subObj;\n  };\n\n  return Component;\n}();\n\nComponent.registerComponent('Component', Component);\nexports['default'] = Component;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/component.js"],"names":["exports","__esModule","_window","require","_window2","_interopRequireDefault","_dom","Dom","_interopRequireWildcard","_fn","Fn","_guid","Guid","_events","Events","_log","_log2","_toTitleCase","_toTitleCase2","_mergeOptions","_mergeOptions2","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","Component","player","options","ready","play","player_","options_","id_","id","el","newGUID","name_","name","el_","createEl","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","dispose","trigger","type","bubbles","i","length","off","parentNode","removeChild","removeElData","warn","tagName","properties","attributes","localize","string","code","language","languages","primaryCode","split","primaryLang","contentEl","contentEl_","children","getChildById","getChild","addChild","child","arguments","undefined","index","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","Error","splice","childNodes","refNode","insertBefore","childFound","compEl","_this","parentOptions","handleAdd","opts","playerOptions","newChild","workingChildren","Tech","Array","isArray","keys","concat","filter","some","wchild","map","c","isTech","forEach","buildCSSClass","on","first","second","third","_this2","bind","target","fn","removeOnDispose","guid","cleanRemover","nodeName","one","_this3","_arguments","newFunc","apply","event","hash","sync","isReady_","setTimeout","readyQueue_","push","triggerReady","readyQueue","$","selector","context","$$","hasClass","classToCheck","hasElClass","addClass","classToAdd","addElClass","removeClass","classToRemove","removeElClass","toggleClass","classToToggle","predicate","toggleElClass","show","hide","lockShowing","unlockShowing","getAttribute","attribute","setAttribute","value","removeAttribute","width","num","skipListeners","dimension","height","dimensions","widthOrHeight","indexOf","style","val","pxIndex","parseInt","slice","currentDimension","computedWidthOrHeight","getComputedStyle","computedStyle","getPropertyValue","parseFloat","rule","currentDimensions","currentWidth","currentHeight","focus","blur","emitTapEvents","touchStart","firstTouch","tapMovementThreshold","touchTimeThreshold","couldBeTap","touches","pageX","pageY","Date","getTime","xdiff","ydiff","touchDistance","Math","sqrt","noTap","touchTime","preventDefault","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeout","timeoutId","disposeFn","clearTimeout","interval","intervalId","registerComponent","comp","components_","Player","players","playerName","every","Boolean","videojs","extend","props","init","subObj","create","constructor"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _dom = require('./utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _guid = require('./utils/guid.js');\n\nvar Guid = _interopRequireWildcard(_guid);\n\nvar _events = require('./utils/events.js');\n\nvar Events = _interopRequireWildcard(_events);\n\nvar _log = require('./utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _toTitleCase = require('./utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _mergeOptions = require('./utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Player Component - Base class for all UI objects\n                                                                                                                                                           *\n                                                                                                                                                           * @file component.js\n                                                                                                                                                           */\n\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\nvar Component = function () {\n\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   #\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    _classCallCheck(this, Component);\n\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = (0, _mergeOptions2['default'])({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = (0, _mergeOptions2['default'])(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n\n      this.id_ = id + '_component_' + Guid.newGUID();\n    }\n\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready);\n    // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Component.prototype.dispose = function dispose() {\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({ type: 'dispose', bubbles: false });\n\n    // Dispose all children.\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n\n    // Remove all event listeners.\n    this.off();\n\n    // Remove element from DOM\n    if (this.el_.parentNode) {\n      this.el_.parentNode.removeChild(this.el_);\n    }\n\n    Dom.removeElData(this.el_);\n    this.el_ = null;\n  };\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.prototype.options = function options(obj) {\n    _log2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = (0, _mergeOptions2['default'])(this.options_, obj);\n    return this.options_;\n  };\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Component.prototype.createEl = function createEl(tagName, properties, attributes) {\n    return Dom.createEl(tagName, properties, attributes);\n  };\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * @param {string} string\n   *        The string to localize.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n\n  Component.prototype.localize = function localize(string) {\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n\n    if (!code || !languages) {\n      return string;\n    }\n\n    var language = languages[code];\n\n    if (language && language[string]) {\n      return language[string];\n    }\n\n    var primaryCode = code.split('-')[0];\n    var primaryLang = languages[primaryCode];\n\n    if (primaryLang && primaryLang[string]) {\n      return primaryLang[string];\n    }\n\n    return string;\n  };\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    return this.childNameIndex_[name];\n  };\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n\n    var component = void 0;\n    var componentName = void 0;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = (0, _toTitleCase2['default'])(child);\n\n      // Options can also be specified as a boolean,\n      // so convert to an empty object if false.\n      if (!options) {\n        options = {};\n      }\n\n      // Same as above, but true is deprecated so show a warning.\n      if (options === true) {\n        _log2['default'].warn('Initializing a child component with `true` is deprecated.' + 'Children should be defined in an array when possible, ' + 'but if necessary use an object instead of `true`.');\n        options = {};\n      }\n\n      var componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n\n    this.children_.splice(index, 0, component);\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && (0, _toTitleCase2['default'])(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  };\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = _this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return { name: name, opts: opts };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || (0, _toTitleCase2['default'])(child.name));\n\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n\n  /**\n   * Add an `event listener` to this `Component`s element.\n   *\n   * The benefit of using this over the following:\n   * - `VjsEvents.on(otherElement, 'eventName', myFunc)`\n   * - `otherComponent.on('eventName', myFunc)`\n   *\n   * 1. Is that the listeners will get cleaned up when either component gets disposed.\n   * 1. It will also bind `myComponent` as the context of `myFunc`.\n   * > NOTE: If you remove the element from the DOM that has used `on` you need to\n   *         clean up references using: `myComponent.trigger(el, 'dispose')`\n   *         This will also allow the browser to garbage collect it. In special\n   *         cases such as with `window` and `document`, which are both permanent,\n   *         this is not necessary.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @listens Component#dispose\n   */\n\n\n  Component.prototype.on = function on(first, second, third) {\n    var _this2 = this;\n\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.on(this.el_, first, Fn.bind(this, second));\n\n      // Targeting another component or element\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n\n      // When this component is disposed, remove the listener from the other component\n      var removeOnDispose = function removeOnDispose() {\n        return _this2.off(target, type, fn);\n      };\n\n      // Use the same function ID so we can remove it later it using the ID\n      // of the original listener\n      removeOnDispose.guid = fn.guid;\n      this.on('dispose', removeOnDispose);\n\n      // If the other component is disposed first we need to clean the reference\n      // to the other component in this component's removeOnDispose listener\n      // Otherwise we create a memory leak.\n      var cleanRemover = function cleanRemover() {\n        return _this2.off('dispose', removeOnDispose);\n      };\n\n      // Add the same function ID so we can easily remove it later\n      cleanRemover.guid = fn.guid;\n\n      // Check if this is a DOM node\n      if (first.nodeName) {\n        // Add the listener to the other element\n        Events.on(target, type, fn);\n        Events.on(target, 'dispose', cleanRemover);\n\n        // Should be a component\n        // Not using `instanceof Component` because it makes mock players difficult\n      } else if (typeof first.on === 'function') {\n        // Add the listener to the other component\n        target.on(type, fn);\n        target.on('dispose', cleanRemover);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove an event listener from this `Component`s element. If the second argument is\n   * exluded all listeners for the type passed in as the first argument will be removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.off = function off(first, second, third) {\n    if (!first || typeof first === 'string' || Array.isArray(first)) {\n      Events.off(this.el_, first, second);\n    } else {\n      var target = first;\n      var type = second;\n      // Ensure there's at least a guid, even if the function hasn't been used\n      var fn = Fn.bind(this, third);\n\n      // Remove the dispose listener on this component,\n      // which was given the same guid as the event listener\n      this.off('dispose', fn);\n\n      if (first.nodeName) {\n        // Remove the listener\n        Events.off(target, type, fn);\n        // Remove the listener for cleaning the dispose listener\n        Events.off(target, 'dispose', fn);\n      } else {\n        target.off(type, fn);\n        target.off('dispose', fn);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Add an event listener that gets triggered only once and then gets removed.\n   *\n   * @param {string|Component|string[]} [first]\n   *        The event name, and array of event names, or another `Component`.\n   *\n   * @param {EventTarget~EventListener|string|string[]} [second]\n   *        The listener function, an event name, or an Array of events names.\n   *\n   * @param {EventTarget~EventListener} [third]\n   *        The event handler if `first` is a `Component` and `second` is an event name\n   *        or an Array of event names.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.one = function one(first, second, third) {\n    var _this3 = this,\n        _arguments = arguments;\n\n    if (typeof first === 'string' || Array.isArray(first)) {\n      Events.one(this.el_, first, Fn.bind(this, second));\n    } else {\n      var target = first;\n      var type = second;\n      var fn = Fn.bind(this, third);\n\n      var newFunc = function newFunc() {\n        _this3.off(target, type, newFunc);\n        fn.apply(null, _arguments);\n      };\n\n      // Keep the same function ID so we can remove it later\n      newFunc.guid = fn.guid;\n\n      this.on(target, type, newFunc);\n    }\n\n    return this;\n  };\n\n  /**\n   * Trigger an event on an element.\n   *\n   * @param {EventTarget~Event|Object|string} event\n   *        The event name, and Event, or an event-like object with a type attribute\n   *        set to the event name.\n   *\n   * @param {Object} [hash]\n   *        Data hash to pass along with the event\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.trigger = function trigger(event, hash) {\n    Events.trigger(this.el_, event, hash);\n    return this;\n  };\n\n  /**\n   * Bind a listener to the component's ready state. If the ready event has already\n   * happened it will trigger the function immediately.\n   *\n   * @param  {Component~ReadyCallback} fn\n   *         A function to call when ready is triggered.\n   *\n   * @param  {boolean} [sync=false]\n   *         Execute the listener synchronously if `Component` is ready.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (fn) {\n      if (this.isReady_) {\n        if (sync) {\n          fn.call(this);\n        } else {\n          // Call the function asynchronously by default for consistency\n          this.setTimeout(fn, 1);\n        }\n      } else {\n        this.readyQueue_ = this.readyQueue_ || [];\n        this.readyQueue_.push(fn);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggerd asynchronously\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  };\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$ = function $(selector, context) {\n    return Dom.$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$$ = function $$(selector, context) {\n    return Dom.$$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n\n  Component.prototype.hasClass = function hasClass(classToCheck) {\n    return Dom.hasElClass(this.el_, classToCheck);\n  };\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.addClass = function addClass(classToAdd) {\n    Dom.addElClass(this.el_, classToAdd);\n    return this;\n  };\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.removeClass = function removeClass(classToRemove) {\n    Dom.removeElClass(this.el_, classToRemove);\n    return this;\n  };\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {\n    Dom.toggleElClass(this.el_, classToToggle, predicate);\n    return this;\n  };\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n    return this;\n  };\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n    return this;\n  };\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n    return this;\n  };\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @private\n   */\n\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n    return this;\n  };\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n\n  Component.prototype.getAttribute = function getAttribute(attribute) {\n    return Dom.getAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n\n  Component.prototype.setAttribute = function setAttribute(attribute, value) {\n    Dom.setAttribute(this.el_, attribute, value);\n    return this;\n  };\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n\n  Component.prototype.removeAttribute = function removeAttribute(attribute) {\n    Dom.removeAttribute(this.el_, attribute);\n    return this;\n  };\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the resize event trigger\n   *\n   * @return {Component|number|string}\n   *         - The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip resize listeners on width for optimization\n    return this.width(width, true).height(height);\n  };\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#resize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip resize event trigger\n   *\n   * @return {Component}\n   *         - the dimension when getting or 0 if unset\n   *         - Returns itself when setting; method can be chained.\n   */\n\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#resize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('resize');\n      }\n\n      // Return component\n      return this;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + (0, _toTitleCase2['default'])(widthOrHeight)], 10);\n  };\n\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof _window2['default'].getComputedStyle === 'function') {\n      var computedStyle = _window2['default'].getComputedStyle(this.el_);\n\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    }\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + (0, _toTitleCase2['default'])(widthOrHeight);\n\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  };\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n\n  /**\n   * Set the focus to this component\n   */\n\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n\n  /**\n   * Remove the focus from this component\n   */\n\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    var tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    var touchTimeThreshold = 200;\n\n    var couldBeTap = void 0;\n\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = new Date().getTime();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    var report = Fn.bind(this.player(), this.player().reportUserActivity);\n\n    var touchHolding = void 0;\n\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose}.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    fn = Fn.bind(this, fn);\n\n    var timeoutId = _window2['default'].setTimeout(fn, timeout);\n    var disposeFn = function disposeFn() {\n      this.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.on('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    _window2['default'].clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.off('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    fn = Fn.bind(this, fn);\n\n    var intervalId = _window2['default'].setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      this.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.on('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    _window2['default'].clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.off('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} comp\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n\n  Component.registerComponent = function registerComponent(name, comp) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    if (name === 'Player' && Component.components_[name]) {\n      var Player = Component.components_[name];\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (Player.players && Object.keys(Player.players).length > 0 && Object.keys(Player.players).map(function (playerName) {\n        return Player.players[playerName];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created');\n      }\n    }\n\n    Component.components_[name] = comp;\n\n    return comp;\n  };\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = (0, _toTitleCase2['default'])(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n\n    if (_window2['default'] && _window2['default'].videojs && _window2['default'].videojs[name]) {\n      _log2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');\n\n      return _window2['default'].videojs[name];\n    }\n  };\n\n  /**\n   * Sets up the constructor using the supplied init method or uses the init of the\n   * parent object.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties.\n   *\n   * @return {Object}\n   *         the extended object.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.extend = function extend(props) {\n    props = props || {};\n\n    _log2['default'].warn('Component.extend({}) has been deprecated, ' + ' use videojs.extend(Component, {}) instead');\n\n    // Set up the constructor using the supplied init method\n    // or using the init of the parent object\n    // Make sure to check the unobfuscated version for external libs\n    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};\n    // In Resig's simple class inheritance (previously used) the constructor\n    //  is a function that calls `this.init.apply(arguments)`\n    // However that would prevent us from using `ParentObject.call(this);`\n    //  in a Child constructor because the `this` in `this.init`\n    //  would still refer to the Child and cause an infinite loop.\n    // We would instead have to do\n    //    `ParentObject.prototype.init.apply(this, arguments);`\n    //  Bleh. We're not creating a _super() function, so it's good to keep\n    //  the parent constructor reference simple.\n    var subObj = function subObj() {\n      init.apply(this, arguments);\n    };\n\n    // Inherit from this object's prototype\n    subObj.prototype = Object.create(this.prototype);\n    // Reset the constructor property for subObj otherwise\n    // instances of subObj would have the constructor of the parent Object\n    subObj.prototype.constructor = subObj;\n\n    // Make the class extendable\n    subObj.extend = Component.extend;\n\n    // Extend subObj's prototype with functions and other properties from props\n    for (var name in props) {\n      if (props.hasOwnProperty(name)) {\n        subObj.prototype[name] = props[name];\n      }\n    }\n\n    return subObj;\n  };\n\n  return Component;\n}();\n\nComponent.registerComponent('Component', Component);\nexports['default'] = Component;\n"]},"metadata":{},"sourceType":"script"}