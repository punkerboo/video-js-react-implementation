{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.logByType = undefined;\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _browser = require('./browser');\n\nvar _obj = require('./obj');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar log = void 0;\n/**\n * Log messages to the console and history based on the type of message\n *\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n *\n * @param  {boolean} [stringify]\n *         By default, only old IEs should get console argument stringification,\n *         but this is exposed as a parameter to facilitate testing.\n */\n\n/**\n * @file log.js\n * @module log\n */\n\nvar logByType = exports.logByType = function logByType(type, args) {\n  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;\n\n  if (type !== 'log') {\n    // add the type to the front of the message when it's not \"log\"\n    args.unshift(type.toUpperCase() + ':');\n  } // add to history\n\n\n  log.history.push(args); // add console prefix after adding to history\n\n  args.unshift('VIDEOJS:'); // If there's no console then don't try to output messages, but they will\n  // still be stored in `log.history`.\n  //\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n\n  var fn = _window2['default'].console && _window2['default'].console[type]; // Bail out if there's no console.\n\n  if (!fn) {\n    return;\n  } // IEs previous to 11 log objects uselessly as \"[object Object]\"; so, JSONify\n  // objects and arrays for those less-capable browsers.\n\n\n  if (stringify) {\n    args = args.map(function (a) {\n      if ((0, _obj.isObject)(a) || Array.isArray(a)) {\n        try {\n          return JSON.stringify(a);\n        } catch (x) {\n          return String(a);\n        }\n      } // Cast to string before joining, so we get null and undefined explicitly\n      // included in output (as we would in a modern console).\n\n\n      return String(a);\n    }).join(' ');\n  } // Old IE versions do not allow .apply() for console methods (they are\n  // reported as objects rather than functions).\n\n\n  if (!fn.apply) {\n    fn(args);\n  } else {\n    fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);\n  }\n};\n/**\n * Log plain debug messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged.\n */\n\n\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  logByType('log', args);\n};\n/**\n * Keep a history of log messages\n *\n * @type {Array}\n */\n\n\nlog.history = [];\n/**\n * Log error messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\n\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return logByType('error', args);\n};\n/**\n * Log warning messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\n\n\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return logByType('warn', args);\n};\n\nexports['default'] = log;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/utils/log.js"],"names":["exports","__esModule","logByType","undefined","_window","require","_window2","_interopRequireDefault","_browser","_obj","obj","log","type","args","stringify","arguments","length","IE_VERSION","unshift","toUpperCase","history","push","fn","console","map","a","isObject","Array","isArray","JSON","x","String","join","apply","_len","_key","error","_len2","_key2","warn","_len3","_key3"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.logByType = undefined;\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _browser = require('./browser');\n\nvar _obj = require('./obj');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar log = void 0;\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n *\n * @param  {boolean} [stringify]\n *         By default, only old IEs should get console argument stringification,\n *         but this is exposed as a parameter to facilitate testing.\n */\n/**\n * @file log.js\n * @module log\n */\nvar logByType = exports.logByType = function logByType(type, args) {\n  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!_browser.IE_VERSION && _browser.IE_VERSION < 11;\n\n\n  if (type !== 'log') {\n\n    // add the type to the front of the message when it's not \"log\"\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // add to history\n  log.history.push(args);\n\n  // add console prefix after adding to history\n  args.unshift('VIDEOJS:');\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in `log.history`.\n  //\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  var fn = _window2['default'].console && _window2['default'].console[type];\n\n  // Bail out if there's no console.\n  if (!fn) {\n    return;\n  }\n\n  // IEs previous to 11 log objects uselessly as \"[object Object]\"; so, JSONify\n  // objects and arrays for those less-capable browsers.\n  if (stringify) {\n    args = args.map(function (a) {\n      if ((0, _obj.isObject)(a) || Array.isArray(a)) {\n        try {\n          return JSON.stringify(a);\n        } catch (x) {\n          return String(a);\n        }\n      }\n\n      // Cast to string before joining, so we get null and undefined explicitly\n      // included in output (as we would in a modern console).\n      return String(a);\n    }).join(' ');\n  }\n\n  // Old IE versions do not allow .apply() for console methods (they are\n  // reported as objects rather than functions).\n  if (!fn.apply) {\n    fn(args);\n  } else {\n    fn[Array.isArray(args) ? 'apply' : 'call'](_window2['default'].console, args);\n  }\n};\n\n/**\n * Log plain debug messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged.\n */\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  logByType('log', args);\n};\n\n/**\n * Keep a history of log messages\n *\n * @type {Array}\n */\nlog.history = [];\n\n/**\n * Log error messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return logByType('error', args);\n};\n\n/**\n * Log warning messages\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return logByType('warn', args);\n};\n\nexports['default'] = log;\n"]},"metadata":{},"sourceType":"script"}