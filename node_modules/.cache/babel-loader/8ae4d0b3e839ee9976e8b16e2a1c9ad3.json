{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _tech = require('./tech');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _dom = require('../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _url = require('../utils/url.js');\n\nvar Url = _interopRequireWildcard(_url);\n\nvar _timeRanges = require('../utils/time-ranges.js');\n\nvar _flashRtmp = require('./flash-rtmp');\n\nvar _flashRtmp2 = _interopRequireDefault(_flashRtmp);\n\nvar _component = require('../component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _obj = require('../utils/obj');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file flash.js\n * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n * https://github.com/zencoder/video-js-swf\n * Not using setupTriggers. Using global onEvent func to distribute events\n */\n\n\nvar navigator = _window2['default'].navigator;\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\nvar Flash = function (_Tech) {\n  _inherits(Flash, _Tech);\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `Flash` Tech is ready.\n   */\n\n\n  function Flash(options, ready) {\n    _classCallCheck(this, Flash); // Set the source when ready\n\n\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    if (options.source) {\n      _this.ready(function () {\n        this.setSource(options.source);\n      }, true);\n    } // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n\n\n    if (options.startTime) {\n      _this.ready(function () {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    } // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n\n\n    _window2['default'].videojs = _window2['default'].videojs || {};\n    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};\n    _window2['default'].videojs.Flash.onReady = Flash.onReady;\n    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;\n    _window2['default'].videojs.Flash.onError = Flash.onError;\n\n    _this.on('seeked', function () {\n      this.lastSeekTarget_ = undefined;\n    });\n\n    return _this;\n  }\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Flash.prototype.createEl = function createEl() {\n    var options = this.options_; // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n\n    if (!options.swf) {\n      var ver = '5.4.1';\n      options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';\n    } // Generate ID for swf object\n\n\n    var objId = options.techId; // Merge default flashvars with ones passed in to init\n\n    var flashVars = (0, _obj.assign)({\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n    }, options.flashVars); // Merge default parames with ones passed in\n\n    var params = (0, _obj.assign)({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params); // Merge default attributes with ones passed in\n\n    var attributes = (0, _obj.assign)({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      'class': 'vjs-tech'\n    }, options.attributes);\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n    return this.el_;\n  };\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.play = function play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n\n    this.el_.vjs_play();\n  };\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.pause = function pause() {\n    this.el_.vjs_pause();\n  };\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Flash.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.currentSrc();\n    } // Setting src through `src` not `setSrc` will be deprecated\n\n\n    return this.setSrc(_src);\n  };\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   */\n\n\n  Flash.prototype.setSrc = function setSrc(src) {\n    var _this2 = this; // Make sure source URL is absolute.\n\n\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src); // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n\n    if (this.autoplay()) {\n      this.setTimeout(function () {\n        return _this2.play();\n      }, 0);\n    }\n  };\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n\n\n  Flash.prototype.seeking = function seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  };\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n\n\n  Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n    var seekable = this.seekable();\n\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n\n      _Tech.prototype.setCurrentTime.call(this);\n    }\n  };\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n\n\n  Flash.prototype.currentTime = function currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n\n    return this.el_.vjs_getProperty('currentTime');\n  };\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n\n\n  Flash.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n\n    return this.el_.vjs_getProperty('currentSrc');\n  };\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n\n\n  Flash.prototype.duration = function duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n\n    var duration = this.el_.vjs_getProperty('duration');\n    return duration >= 0 ? duration : Infinity;\n  };\n  /**\n   * Load media into Tech.\n   */\n\n\n  Flash.prototype.load = function load() {\n    this.el_.vjs_load();\n  };\n  /**\n   * Get the poster image that was set on the tech.\n   */\n\n\n  Flash.prototype.poster = function poster() {\n    this.el_.vjs_getProperty('poster');\n  };\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n\n\n  Flash.prototype.setPoster = function setPoster() {};\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n\n\n  Flash.prototype.seekable = function seekable() {\n    var duration = this.duration();\n\n    if (duration === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n\n    return (0, _timeRanges.createTimeRange)(0, duration);\n  };\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Flash.prototype.buffered = function buffered() {\n    var ranges = this.el_.vjs_getProperty('buffered');\n\n    if (ranges.length === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n\n    return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);\n  };\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  };\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.enterFullScreen = function enterFullScreen() {\n    return false;\n  };\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Flash.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    var videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Flash;\n}(_tech2['default']); // Create setters and getters for attributes\n\n\nvar _api = Flash.prototype;\n\nvar _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');\n\nvar _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');\n\nfunction _createSetter(attr) {\n  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n  _api['set' + attrUpper] = function (val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\n\nfunction _createGetter(attr) {\n  _api[attr] = function () {\n    return this.el_.vjs_getProperty(attr);\n  };\n} // Create getter and setters for all read/write attributes\n\n\nfor (var i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n\n  _createSetter(_readWrite[i]);\n} // Create getters for read-only attributes\n\n\nfor (var _i = 0; _i < _readOnly.length; _i++) {\n  _createGetter(_readOnly[_i]);\n}\n/** ------------------------------ Getters ------------------------------ **/\n\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\n\n\nFlash.isSupported = function () {\n  return Flash.version()[0] >= 10; // return swfobject.hasFlashPlayerVersion('10');\n}; // Add Source Handler pattern functions to this tech\n\n\n_tech2['default'].withSourceHandlers(Flash);\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\n\n\nFlash.nativeSourceHandler = {};\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\n\nFlash.nativeSourceHandler.canPlayType = function (type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n\n  return '';\n};\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\n\n\nFlash.nativeSourceHandler.canHandleSource = function (source, options) {\n  var type = void 0;\n\n  function guessMimeType(src) {\n    var ext = Url.getFileExtension(src);\n\n    if (ext) {\n      return 'video/' + ext;\n    }\n\n    return '';\n  }\n\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\n\n\nFlash.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\n\n\nFlash.nativeSourceHandler.dispose = function () {}; // Register the native source handler\n\n\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\n\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n */\n\nFlash.onReady = function (currSwf) {\n  var el = Dom.getEl(currSwf);\n  var tech = el && el.tech; // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\n\n\nFlash.checkReady = function (tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  } // check if API property exists\n\n\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function () {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\n\n\nFlash.onEvent = function (swfID, eventName) {\n  var tech = Dom.getEl(swfID).tech;\n  var args = Array.prototype.slice.call(arguments, 2); // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n\n  tech.setTimeout(function () {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} The error string\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\n\n\nFlash.onError = function (swfID, err) {\n  var tech = Dom.getEl(swfID).tech; // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  } // trigger a custom error\n\n\n  tech.error('FLASH: ' + err);\n};\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\n\n\nFlash.version = function () {\n  var version = '0,0,0'; // IE\n\n  try {\n    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1]; // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {// satisfy linter\n    }\n  }\n\n  return version.split(',');\n};\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\n\n\nFlash.embed = function (swf, flashVars, params, attributes) {\n  var code = Flash.getEmbedCode(swf, flashVars, params, attributes); // Get element by embedding code and retrieving created element\n\n  var obj = Dom.createEl('div', {\n    innerHTML: code\n  }).childNodes[0];\n  return obj;\n};\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\n\n\nFlash.getEmbedCode = function (swf, flashVars, params, attributes) {\n  var objTag = '<object type=\"application/x-shockwave-flash\" ';\n  var flashVarsString = '';\n  var paramsString = '';\n  var attrsString = ''; // Convert flash vars to string\n\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n      flashVarsString += key + '=' + flashVars[key] + '&amp;';\n    });\n  } // Add swf, flashVars, and other default params\n\n\n  params = (0, _obj.assign)({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params); // Create param tags string\n\n  Object.getOwnPropertyNames(params).forEach(function (key) {\n    paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n  });\n  attributes = (0, _obj.assign)({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n  }, attributes); // Create Attributes string\n\n  Object.getOwnPropertyNames(attributes).forEach(function (key) {\n    attrsString += key + '=\"' + attributes[key] + '\" ';\n  });\n  return '' + objTag + attrsString + '>' + paramsString + '</object>';\n}; // Run Flash through the RTMP decorator\n\n\n(0, _flashRtmp2['default'])(Flash);\n\n_component2['default'].registerComponent('Flash', Flash);\n\n_tech2['default'].registerTech('Flash', Flash);\n\nexports['default'] = Flash;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/tech/flash.js"],"names":["exports","__esModule","_tech","require","_tech2","_interopRequireDefault","_dom","Dom","_interopRequireWildcard","_url","Url","_timeRanges","_flashRtmp","_flashRtmp2","_component","_component2","_window","_window2","_obj","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","navigator","Flash","_Tech","options","ready","_this","source","setSource","startTime","load","play","currentTime","videojs","onReady","onEvent","onError","on","lastSeekTarget_","undefined","createEl","options_","swf","ver","objId","techId","flashVars","assign","readyFunction","eventProxyFunction","errorEventProxyFunction","autoplay","preload","loop","muted","params","wmode","bgcolor","attributes","id","name","el_","embed","tech","ended","setCurrentTime","vjs_play","pause","vjs_pause","src","_src","currentSrc","setSrc","_this2","getAbsoluteURL","vjs_src","setTimeout","seeking","time","seekable","length","start","end","trigger","vjs_setProperty","vjs_getProperty","currentSource_","duration","readyState","NaN","Infinity","vjs_load","poster","setPoster","createTimeRange","buffered","ranges","supportsFullScreen","enterFullScreen","getVideoPlaybackQuality","videoPlaybackQuality","performance","now","creationTime","timing","navigationStart","Date","_api","_readWrite","split","_readOnly","_createSetter","attr","attrUpper","charAt","toUpperCase","slice","val","_createGetter","i","_i","isSupported","version","withSourceHandlers","nativeSourceHandler","canPlayType","type","formats","canHandleSource","guessMimeType","ext","getFileExtension","replace","toLowerCase","handleSource","dispose","registerSourceHandler","currSwf","el","getEl","checkReady","triggerReady","swfID","eventName","args","Array","arguments","err","error","ActiveXObject","GetVariable","match","e","mimeTypes","enabledPlugin","plugins","description","code","getEmbedCode","innerHTML","childNodes","objTag","flashVarsString","paramsString","attrsString","getOwnPropertyNames","forEach","movie","flashvars","allowScriptAccess","allowNetworking","data","width","height","registerComponent","registerTech"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlG,KAAK,CAACmG,WAAN,GAAoB,YAAY;AAC9B,SAAOnG,KAAK,CAACoG,OAAN,GAAgB,CAAhB,KAAsB,EAA7B,CAD8B,CAE9B;AACD,CAHD,C,CAKA;;;AACA7I,MAAM,CAAC,SAAD,CAAN,CAAkB8I,kBAAlB,CAAqCrG,KAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,KAAK,CAACsG,mBAAN,GAA4B,EAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAtG,KAAK,CAACsG,mBAAN,CAA0BC,WAA1B,GAAwC,UAAUC,IAAV,EAAgB;AACtD,MAAIA,IAAI,IAAIxG,KAAK,CAACyG,OAAlB,EAA2B;AACzB,WAAO,OAAP;AACD;;AAED,SAAO,EAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzG,KAAK,CAACsG,mBAAN,CAA0BI,eAA1B,GAA4C,UAAUrG,MAAV,EAAkBH,OAAlB,EAA2B;AACrE,MAAIsG,IAAI,GAAG,KAAK,CAAhB;;AAEA,WAASG,aAAT,CAAuB5D,GAAvB,EAA4B;AAC1B,QAAI6D,GAAG,GAAG/I,GAAG,CAACgJ,gBAAJ,CAAqB9D,GAArB,CAAV;;AAEA,QAAI6D,GAAJ,EAAS;AACP,aAAO,WAAWA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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _tech = require('./tech');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _dom = require('../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _url = require('../utils/url.js');\n\nvar Url = _interopRequireWildcard(_url);\n\nvar _timeRanges = require('../utils/time-ranges.js');\n\nvar _flashRtmp = require('./flash-rtmp');\n\nvar _flashRtmp2 = _interopRequireDefault(_flashRtmp);\n\nvar _component = require('../component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _obj = require('../utils/obj');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file flash.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * VideoJS-SWF - Custom Flash Player with HTML5-ish API\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * https://github.com/zencoder/video-js-swf\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Not using setupTriggers. Using global onEvent func to distribute events\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar navigator = _window2['default'].navigator;\n\n/**\n * Flash Media Controller - Wrapper for Flash Media API\n *\n * @mixes FlashRtmpDecorator\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\nvar Flash = function (_Tech) {\n  _inherits(Flash, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `Flash` Tech is ready.\n   */\n  function Flash(options, ready) {\n    _classCallCheck(this, Flash);\n\n    // Set the source when ready\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    if (options.source) {\n      _this.ready(function () {\n        this.setSource(options.source);\n      }, true);\n    }\n\n    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers\n    // This allows resetting the playhead when we catch the reload\n    if (options.startTime) {\n      _this.ready(function () {\n        this.load();\n        this.play();\n        this.currentTime(options.startTime);\n      }, true);\n    }\n\n    // Add global window functions that the swf expects\n    // A 4.x workflow we weren't able to solve for in 5.0\n    // because of the need to hard code these functions\n    // into the swf for security reasons\n    _window2['default'].videojs = _window2['default'].videojs || {};\n    _window2['default'].videojs.Flash = _window2['default'].videojs.Flash || {};\n    _window2['default'].videojs.Flash.onReady = Flash.onReady;\n    _window2['default'].videojs.Flash.onEvent = Flash.onEvent;\n    _window2['default'].videojs.Flash.onError = Flash.onError;\n\n    _this.on('seeked', function () {\n      this.lastSeekTarget_ = undefined;\n    });\n\n    return _this;\n  }\n\n  /**\n   * Create the `Flash` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Flash.prototype.createEl = function createEl() {\n    var options = this.options_;\n\n    // If video.js is hosted locally you should also set the location\n    // for the hosted swf, which should be relative to the page (not video.js)\n    // Otherwise this adds a CDN url.\n    // The CDN also auto-adds a swf URL for that specific version.\n    if (!options.swf) {\n      var ver = '5.4.1';\n\n      options.swf = '//vjs.zencdn.net/swf/' + ver + '/video-js.swf';\n    }\n\n    // Generate ID for swf object\n    var objId = options.techId;\n\n    // Merge default flashvars with ones passed in to init\n    var flashVars = (0, _obj.assign)({\n\n      // SWF Callback Functions\n      readyFunction: 'videojs.Flash.onReady',\n      eventProxyFunction: 'videojs.Flash.onEvent',\n      errorEventProxyFunction: 'videojs.Flash.onError',\n\n      // Player Settings\n      autoplay: options.autoplay,\n      preload: options.preload,\n      loop: options.loop,\n      muted: options.muted\n\n    }, options.flashVars);\n\n    // Merge default parames with ones passed in\n    var params = (0, _obj.assign)({\n      // Opaque is needed to overlay controls, but can affect playback performance\n      wmode: 'opaque',\n      // Using bgcolor prevents a white flash when the object is loading\n      bgcolor: '#000000'\n    }, options.params);\n\n    // Merge default attributes with ones passed in\n    var attributes = (0, _obj.assign)({\n      // Both ID and Name needed or swf to identify itself\n      id: objId,\n      name: objId,\n      'class': 'vjs-tech'\n    }, options.attributes);\n\n    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);\n    this.el_.tech = this;\n\n    return this.el_;\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.play = function play() {\n    if (this.ended()) {\n      this.setCurrentTime(0);\n    }\n    this.el_.vjs_play();\n  };\n\n  /**\n   * Called by {@link Player#pause} to pause using the `Flash` `Tech`.\n   */\n\n\n  Flash.prototype.pause = function pause() {\n    this.el_.vjs_pause();\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   * > Note: Please use {@link Flash#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Flash.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.currentSrc();\n    }\n\n    // Setting src through `src` not `setSrc` will be deprecated\n    return this.setSrc(_src);\n  };\n\n  /**\n   * A getter/setter for the `Flash` Tech's source object.\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `Flash` techs.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   */\n\n\n  Flash.prototype.setSrc = function setSrc(src) {\n    var _this2 = this;\n\n    // Make sure source URL is absolute.\n    src = Url.getAbsoluteURL(src);\n    this.el_.vjs_src(src);\n\n    // Currently the SWF doesn't autoplay if you load a source later.\n    // e.g. Load player w/ no source, wait 2s, set src.\n    if (this.autoplay()) {\n      this.setTimeout(function () {\n        return _this2.play();\n      }, 0);\n    }\n  };\n\n  /**\n   * Indicates whether the media is currently seeking to a new position or not.\n   *\n   * @return {boolean}\n   *         - True if seeking to a new position\n   *         - False otherwise\n   */\n\n\n  Flash.prototype.seeking = function seeking() {\n    return this.lastSeekTarget_ !== undefined;\n  };\n\n  /**\n   * Returns the current time in seconds that the media is at in playback.\n   *\n   * @param {number} time\n   *        Current playtime of the media in seconds.\n   */\n\n\n  Flash.prototype.setCurrentTime = function setCurrentTime(time) {\n    var seekable = this.seekable();\n\n    if (seekable.length) {\n      // clamp to the current seekable range\n      time = time > seekable.start(0) ? time : seekable.start(0);\n      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);\n\n      this.lastSeekTarget_ = time;\n      this.trigger('seeking');\n      this.el_.vjs_setProperty('currentTime', time);\n      _Tech.prototype.setCurrentTime.call(this);\n    }\n  };\n\n  /**\n   * Get the current playback time in seconds\n   *\n   * @return {number}\n   *         The current time of playback in seconds.\n   */\n\n\n  Flash.prototype.currentTime = function currentTime() {\n    // when seeking make the reported time keep up with the requested time\n    // by reading the time we're seeking to\n    if (this.seeking()) {\n      return this.lastSeekTarget_ || 0;\n    }\n    return this.el_.vjs_getProperty('currentTime');\n  };\n\n  /**\n   * Get the current source\n   *\n   * @method currentSrc\n   * @return {Tech~SourceObject}\n   *         The current source\n   */\n\n\n  Flash.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.vjs_getProperty('currentSrc');\n  };\n\n  /**\n   * Get the total duration of the current media.\n   *\n   * @return {number}\n   8          The total duration of the current media.\n   */\n\n\n  Flash.prototype.duration = function duration() {\n    if (this.readyState() === 0) {\n      return NaN;\n    }\n    var duration = this.el_.vjs_getProperty('duration');\n\n    return duration >= 0 ? duration : Infinity;\n  };\n\n  /**\n   * Load media into Tech.\n   */\n\n\n  Flash.prototype.load = function load() {\n    this.el_.vjs_load();\n  };\n\n  /**\n   * Get the poster image that was set on the tech.\n   */\n\n\n  Flash.prototype.poster = function poster() {\n    this.el_.vjs_getProperty('poster');\n  };\n\n  /**\n   * Poster images are not handled by the Flash tech so make this is a no-op.\n   */\n\n\n  Flash.prototype.setPoster = function setPoster() {};\n\n  /**\n   * Determine the time ranges that can be seeked to in the media.\n   *\n   * @return {TimeRange}\n   *         Returns the time ranges that can be seeked to.\n   */\n\n\n  Flash.prototype.seekable = function seekable() {\n    var duration = this.duration();\n\n    if (duration === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n    return (0, _timeRanges.createTimeRange)(0, duration);\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Flash.prototype.buffered = function buffered() {\n    var ranges = this.el_.vjs_getProperty('buffered');\n\n    if (ranges.length === 0) {\n      return (0, _timeRanges.createTimeRange)();\n    }\n    return (0, _timeRanges.createTimeRange)(ranges[0][0], ranges[0][1]);\n  };\n\n  /**\n   * Get fullscreen support -\n   *\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.supportsFullScreen = function supportsFullScreen() {\n    // Flash does not allow fullscreen through javascript\n    return false;\n  };\n\n  /**\n   * Flash does not allow fullscreen through javascript\n   * so this always returns false.\n   *\n   * @return {boolean}\n   *         The Flash tech does not support fullscreen, so it will always return false.\n   */\n\n\n  Flash.prototype.enterFullScreen = function enterFullScreen() {\n    return false;\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Flash.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    var videoPlaybackQuality = this.el_.vjs_getProperty('getVideoPlaybackQuality');\n\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Flash;\n}(_tech2['default']);\n\n// Create setters and getters for attributes\n\n\nvar _api = Flash.prototype;\nvar _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');\nvar _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');\n\nfunction _createSetter(attr) {\n  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);\n\n  _api['set' + attrUpper] = function (val) {\n    return this.el_.vjs_setProperty(attr, val);\n  };\n}\n\nfunction _createGetter(attr) {\n  _api[attr] = function () {\n    return this.el_.vjs_getProperty(attr);\n  };\n}\n\n// Create getter and setters for all read/write attributes\nfor (var i = 0; i < _readWrite.length; i++) {\n  _createGetter(_readWrite[i]);\n  _createSetter(_readWrite[i]);\n}\n\n// Create getters for read-only attributes\nfor (var _i = 0; _i < _readOnly.length; _i++) {\n  _createGetter(_readOnly[_i]);\n}\n\n/** ------------------------------ Getters ------------------------------ **/\n/**\n * Get the value of `rtmpConnection` from the swf.\n *\n * @method Flash#rtmpConnection\n * @return {string}\n *         The current value of `rtmpConnection` on the swf.\n */\n\n/**\n * Get the value of `rtmpStream` from the swf.\n *\n * @method Flash#rtmpStream\n * @return {string}\n *         The current value of `rtmpStream` on the swf.\n */\n\n/**\n * Get the value of `preload` from the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#preload\n * @return {string}\n *         The value of `preload` from the swf. Will be 'none', 'metadata',\n *         or 'auto'.\n */\n\n/**\n * Get the value of `defaultPlaybackRate` from the swf.\n *\n * @method Flash#defaultPlaybackRate\n * @return {number}\n *         The current value of `defaultPlaybackRate` on the swf.\n */\n\n/**\n * Get the value of `playbackRate` from the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the swf. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Get the value of `autoplay` from the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the swf.\n *         - True indicates that the media ashould start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Get the value of `loop` from the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#loop\n * @return {boolean}\n *         - The value of `loop` from the swf.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n */\n\n/**\n * Get the value of `mediaGroup` from the swf.\n *\n * @method Flash#mediaGroup\n * @return {string}\n *         The current value of `mediaGroup` on the swf.\n */\n\n/**\n * Get the value of `controller` from the swf.\n *\n * @method Flash#controller\n * @return {string}\n *         The current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Get the value of the `volume` from the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#volume\n * @return {number}\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Get the value of the `muted` from the swf. `muted` indicates the current\n * audio level should be silent.\n *\n * @method Flash#muted\n * @return {boolean}\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Get the value of `defaultMuted` from the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the swf.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/**\n * Get the value of `networkState` from the swf. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Flash#networkState\n * @return {number}\n *         The value of `networkState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `readyState` from the swf. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Flash#readyState\n * @return {number}\n *         The value of `readyState` from the swf. This will be a number\n *         from the list in the description.\n */\n\n/**\n * Get the value of `initialTime` from the swf.\n *\n * @method Flash#initialTime\n * @return {number}\n *         The `initialTime` proprety on the swf.\n */\n\n/**\n * Get the value of `startOffsetTime` from the swf.\n *\n * @method Flash#startOffsetTime\n * @return {number}\n *         The `startOffsetTime` proprety on the swf.\n */\n\n/**\n * Get the value of `paused` from the swf. `paused` indicates whether the swf\n * is current paused or not.\n *\n * @method Flash#paused\n * @return {boolean}\n *         The value of `paused` from the swf.\n */\n\n/**\n * Get the value of `ended` from the swf. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Flash#ended\n * @return {boolean}\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n\n/**\n * Get the value of `videoWidth` from the swf. `videoWidth` indicates\n * the current width of the media in css pixels.\n *\n * @method Flash#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the swf. This will be a number\n *         in css pixels.\n */\n\n/**\n * Get the value of `videoHeight` from the swf. `videoHeigth` indicates\n * the current height of the media in css pixels.\n *\n * @method Flassh.prototype.videoHeight\n * @return {number}\n *         The value of `videoHeight` from the swf. This will be a number\n *         in css pixels.\n */\n/** ------------------------------ Setters ------------------------------ **/\n\n/**\n * Set the value of `rtmpConnection` on the swf.\n *\n * @method Flash#setRtmpConnection\n * @param {string} rtmpConnection\n *        New value to set the `rtmpConnection` property to.\n */\n\n/**\n * Set the value of `rtmpStream` on the swf.\n *\n * @method Flash#setRtmpStream\n * @param {string} rtmpStream\n *        New value to set the `rtmpStream` property to.\n */\n\n/**\n * Set the value of `preload` on the swf. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Flash#setPreload\n * @param {string} preload\n *        The value of `preload` to set on the swf. Should be 'none', 'metadata',\n *        or 'auto'.\n */\n\n/**\n * Set the value of `defaultPlaybackRate` on the swf.\n *\n * @method Flash#setDefaultPlaybackRate\n * @param {number} defaultPlaybackRate\n *        New value to set the `defaultPlaybackRate` property to.\n */\n\n/**\n * Set the value of `playbackRate` on the swf. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Flash#setPlaybackRate\n * @param {number} playbackRate\n *        New value of `playbackRate` on the swf. A number indicating\n *        the current playback speed of the media, where 1 is normal speed.\n */\n\n/**\n * Set the value of `autoplay` on the swf. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Flash#setAutoplay\n * @param {boolean} autoplay\n *        - The value of `autoplay` from the swf.\n *        - True indicates that the media ashould start as soon as the page loads.\n *        - False indicates that the media should not start as soon as the page loads.\n */\n\n/**\n * Set the value of `loop` on the swf. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Flash#setLoop\n * @param {boolean} loop\n *        - True indicates that playback should seek back to start once\n *          the end of a media is reached.\n *        - False indicates that playback should not loop back to the start when the\n *          end of the media is reached.\n */\n\n/**\n * Set the value of `mediaGroup` on the swf.\n *\n * @method Flash#setMediaGroup\n * @param {string} mediaGroup\n *        New value of `mediaGroup` to set on the swf.\n */\n\n/**\n * Set the value of `controller` on the swf.\n *\n * @method Flash#setController\n * @param {string} controller\n *        New value the current value of `controller` on the swf.\n */\n\n/**\n * Get the value of `controls` from the swf. `controls` indicates\n * whether the native flash controls should be shown or hidden.\n *\n * @method Flash#controls\n * @return {boolean}\n *         - The value of `controls` from the swf.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n */\n\n/**\n * Set the value of the `volume` on the swf. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Flash#setVolume\n * @param {number} percentAsDecimal\n *         The volume percent as a decimal. Value will be between 0-1.\n */\n\n/**\n * Set the value of the `muted` on the swf. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Flash#setMuted\n * @param {boolean} muted\n *         - True if the audio should be set to silent\n *         - False otherwise\n */\n\n/**\n * Set the value of `defaultMuted` on the swf. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. `muted` indicates the\n * current state.\n *\n * @method Flash#setDefaultMuted\n * @param {boolean} defaultMuted\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted.\n */\n\n/* Flash Support Testing -------------------------------------------------------- */\n\n/**\n * Check if the Flash tech is currently supported.\n *\n * @return {boolean}\n *          - True if the flash tech is supported.\n *          - False otherwise.\n */\nFlash.isSupported = function () {\n  return Flash.version()[0] >= 10;\n  // return swfobject.hasFlashPlayerVersion('10');\n};\n\n// Add Source Handler pattern functions to this tech\n_tech2['default'].withSourceHandlers(Flash);\n\n/*\n * Native source handler for flash,  simply passes the source to the swf element.\n *\n * @property {Tech~SourceObject} source\n *           The source object\n *\n * @property {Flash} tech\n *           The instance of the Flash tech\n */\nFlash.nativeSourceHandler = {};\n\n/**\n * Check if the Flash can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'maybe', or '' (empty string)\n */\nFlash.nativeSourceHandler.canPlayType = function (type) {\n  if (type in Flash.formats) {\n    return 'maybe';\n  }\n\n  return '';\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'maybe', or '' (empty string).\n */\nFlash.nativeSourceHandler.canHandleSource = function (source, options) {\n  var type = void 0;\n\n  function guessMimeType(src) {\n    var ext = Url.getFileExtension(src);\n\n    if (ext) {\n      return 'video/' + ext;\n    }\n    return '';\n  }\n\n  if (!source.type) {\n    type = guessMimeType(source.src);\n  } else {\n    // Strip code information from the type because we don't get that specific\n    type = source.type.replace(/;.*/, '').toLowerCase();\n  }\n\n  return Flash.nativeSourceHandler.canPlayType(type);\n};\n\n/**\n * Pass the source to the swf.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Flash} tech\n *        The instance of the Flash tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nFlash.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * noop for native source handler dispose, as cleanup will happen automatically.\n */\nFlash.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nFlash.registerSourceHandler(Flash.nativeSourceHandler);\n\n/**\n * Flash supported mime types.\n *\n * @constant {Object}\n */\nFlash.formats = {\n  'video/flv': 'FLV',\n  'video/x-flv': 'FLV',\n  'video/mp4': 'MP4',\n  'video/m4v': 'MP4'\n};\n\n/**\n * Called when the the swf is \"ready\", and makes sure that the swf is really\n * ready using {@link Flash#checkReady}\n */\nFlash.onReady = function (currSwf) {\n  var el = Dom.getEl(currSwf);\n  var tech = el && el.tech;\n\n  // if there is no el then the tech has been disposed\n  // and the tech element was removed from the player div\n  if (tech && tech.el()) {\n    // check that the flash object is really ready\n    Flash.checkReady(tech);\n  }\n};\n\n/**\n * The SWF isn't always ready when it says it is. Sometimes the API functions still\n * need to be added to the object. If it's not ready, we set a timeout to check again\n * shortly.\n *\n * @param {Flash} tech\n *        The instance of the flash tech to check.\n */\nFlash.checkReady = function (tech) {\n  // stop worrying if the tech has been disposed\n  if (!tech.el()) {\n    return;\n  }\n\n  // check if API property exists\n  if (tech.el().vjs_getProperty) {\n    // tell tech it's ready\n    tech.triggerReady();\n  } else {\n    // wait longer\n    this.setTimeout(function () {\n      Flash.checkReady(tech);\n    }, 50);\n  }\n};\n\n/**\n * Trigger events from the swf on the Flash Tech.\n *\n * @param {number} swfID\n *        The id of the swf that had the event\n *\n * @param {string} eventName\n *        The name of the event to trigger\n */\nFlash.onEvent = function (swfID, eventName) {\n  var tech = Dom.getEl(swfID).tech;\n  var args = Array.prototype.slice.call(arguments, 2);\n\n  // dispatch Flash events asynchronously for two reasons:\n  // - Flash swallows any exceptions generated by javascript it\n  //   invokes\n  // - Flash is suspended until the javascript returns which may cause\n  //   playback performance issues\n  tech.setTimeout(function () {\n    tech.trigger(eventName, args);\n  }, 1);\n};\n\n/**\n * Log errors from the swf on the Flash tech.\n *\n * @param {number} swfID\n *        The id of the swf that had an error.\n *\n * @param {string} The error string\n *        The error to set on the Flash Tech.\n *\n * @return {MediaError|undefined}\n *          - Returns a MediaError when err is 'srcnotfound'\n *          - Returns undefined otherwise.\n */\nFlash.onError = function (swfID, err) {\n  var tech = Dom.getEl(swfID).tech;\n\n  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED\n  if (err === 'srcnotfound') {\n    return tech.error(4);\n  }\n\n  // trigger a custom error\n  tech.error('FLASH: ' + err);\n};\n\n/**\n * Get the current version of Flash that is in use on the page.\n *\n * @return {Array}\n *          an array of versions that are available.\n */\nFlash.version = function () {\n  var version = '0,0,0';\n\n  // IE\n  try {\n    version = new _window2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n\n    // other browsers\n  } catch (e) {\n    try {\n      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\\D+/g, ',').match(/^,?(.+),?$/)[1];\n      }\n    } catch (err) {\n      // satisfy linter\n    }\n  }\n  return version.split(',');\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.embed = function (swf, flashVars, params, attributes) {\n  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);\n\n  // Get element by embedding code and retrieving created element\n  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];\n\n  return obj;\n};\n\n/**\n * Only use for non-iframe embeds.\n *\n * @param {Object} swf\n *        The videojs-swf object.\n *\n * @param {Object} flashVars\n *        Names and values to use as flash option variables.\n *\n * @param {Object} params\n *        Style parameters to set on the object.\n *\n * @param {Object} attributes\n *        Attributes to set on the element.\n *\n * @return {Element}\n *          The embeded Flash DOM element.\n */\nFlash.getEmbedCode = function (swf, flashVars, params, attributes) {\n  var objTag = '<object type=\"application/x-shockwave-flash\" ';\n  var flashVarsString = '';\n  var paramsString = '';\n  var attrsString = '';\n\n  // Convert flash vars to string\n  if (flashVars) {\n    Object.getOwnPropertyNames(flashVars).forEach(function (key) {\n      flashVarsString += key + '=' + flashVars[key] + '&amp;';\n    });\n  }\n\n  // Add swf, flashVars, and other default params\n  params = (0, _obj.assign)({\n    movie: swf,\n    flashvars: flashVarsString,\n    // Required to talk to swf\n    allowScriptAccess: 'always',\n    // All should be default, but having security issues.\n    allowNetworking: 'all'\n  }, params);\n\n  // Create param tags string\n  Object.getOwnPropertyNames(params).forEach(function (key) {\n    paramsString += '<param name=\"' + key + '\" value=\"' + params[key] + '\" />';\n  });\n\n  attributes = (0, _obj.assign)({\n    // Add swf to attributes (need both for IE and Others to work)\n    data: swf,\n\n    // Default to 100% width/height\n    width: '100%',\n    height: '100%'\n\n  }, attributes);\n\n  // Create Attributes string\n  Object.getOwnPropertyNames(attributes).forEach(function (key) {\n    attrsString += key + '=\"' + attributes[key] + '\" ';\n  });\n\n  return '' + objTag + attrsString + '>' + paramsString + '</object>';\n};\n\n// Run Flash through the RTMP decorator\n(0, _flashRtmp2['default'])(Flash);\n\n_component2['default'].registerComponent('Flash', Flash);\n_tech2['default'].registerTech('Flash', Flash);\nexports['default'] = Flash;\n"]},"metadata":{},"sourceType":"script"}