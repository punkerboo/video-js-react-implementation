{"ast":null,"code":"var _jsxFileName = \"C:\\\\test_website\\\\ninjasatnoon\\\\src\\\\video.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const VideoJS = props => {\n  _s();\n\n  const videoRef = React.useRef(null);\n  const playerRef = React.useRef(null);\n  const {\n    options,\n    onReady\n  } = props;\n  React.useEffect(() => {\n    // make sure Video.js player is only initialized once\n    if (!playerRef.current) {\n      const videoElement = videoRef.current;\n      if (!videoElement) return;\n      const player = playerRef.current = videojs(videoElement, options, () => {\n        console.log(\"player is ready\");\n        onReady && onReady(player);\n      });\n    } else {// you can update player here [update player through props]\n      // const player = playerRef.current;\n      // player.autoplay(options.autoplay);\n      // player.src(options.sources);\n    }\n  }, [options, videoRef]); // Dispose the Video.js player when the functional component unmounts\n\n  React.useEffect(() => {\n    const player = playerRef.current;\n    return () => {\n      if (player) {\n        player.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, [playerRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-vjs-player\": true,\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      className: \"video-js vjs-big-play-centered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n};\n\n_s(VideoJS, \"bnDqIex76F+3YH3m5e6j2tGQJQ0=\");\n\n_c = VideoJS;\nexport default VideoJS;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoJS\");","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/src/video.js"],"names":["React","videojs","VideoJS","props","videoRef","useRef","playerRef","options","onReady","useEffect","current","videoElement","player","console","log","dispose"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,4BAAP;;AAEA,OAAO,MAAMC,OAAO,GAAKC,KAAF,IAAa;AAAA;;AAEhC,QAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa,IAAb,CAAjB;AACA,QAAMC,SAAS,GAAGN,KAAK,CAACK,MAAN,CAAa,IAAb,CAAlB;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBL,KAA7B;AAEAH,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB;AACA,QAAI,CAACH,SAAS,CAACI,OAAf,EAAwB;AACtB,YAAMC,YAAY,GAAGP,QAAQ,CAACM,OAA9B;AACA,UAAI,CAACC,YAAL,EAAmB;AAEnB,YAAMC,MAAM,GAAGN,SAAS,CAACI,OAAV,GAAoBT,OAAO,CAACU,YAAD,EAAeJ,OAAf,EAAwB,MAAM;AACtEM,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAN,QAAAA,OAAO,IAAIA,OAAO,CAACI,MAAD,CAAlB;AACD,OAHyC,CAA1C;AAID,KARD,MAQO,CACL;AACA;AACA;AACA;AACD;AACF,GAhBD,EAgBG,CAACL,OAAD,EAAUH,QAAV,CAhBH,EANgC,CAwBhC;;AACAJ,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAMG,MAAM,GAAGN,SAAS,CAACI,OAAzB;AAEA,WAAO,MAAM;AACX,UAAIE,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACG,OAAP;AACAT,QAAAA,SAAS,CAACI,OAAV,GAAoB,IAApB;AACD;AACF,KALD;AAMD,GATD,EASG,CAACJ,SAAD,CATH;AAWA,sBACE;AAAK,2BAAL;AAAA,2BACE;AAAO,MAAA,GAAG,EAAEF,QAAZ;AAAsB,MAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzCI;;GAAMF,O;;KAAAA,O;AA2CX,eAAeA,OAAf","sourcesContent":["import React from \"react\";\r\nimport videojs from \"video.js\";\r\nimport \"video.js/dist/video-js.css\";\r\n\r\nexport const VideoJS = ( props ) => {\r\n\r\n    const videoRef = React.useRef(null);\r\n    const playerRef = React.useRef(null);\r\n    const { options, onReady } = props;\r\n  \r\n    React.useEffect(() => {\r\n      // make sure Video.js player is only initialized once\r\n      if (!playerRef.current) {\r\n        const videoElement = videoRef.current;\r\n        if (!videoElement) return;\r\n  \r\n        const player = playerRef.current = videojs(videoElement, options, () => {\r\n          console.log(\"player is ready\");\r\n          onReady && onReady(player);\r\n        });\r\n      } else {\r\n        // you can update player here [update player through props]\r\n        // const player = playerRef.current;\r\n        // player.autoplay(options.autoplay);\r\n        // player.src(options.sources);\r\n      }\r\n    }, [options, videoRef]);\r\n  \r\n    // Dispose the Video.js player when the functional component unmounts\r\n    React.useEffect(() => {\r\n      const player = playerRef.current;\r\n  \r\n      return () => {\r\n        if (player) {\r\n          player.dispose();\r\n          playerRef.current = null;\r\n        }\r\n      };\r\n    }, [playerRef]);\r\n  \r\n    return (\r\n      <div data-vjs-player>\r\n        <video ref={videoRef} className=\"video-js vjs-big-play-centered\" />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default VideoJS;"]},"metadata":{},"sourceType":"module"}