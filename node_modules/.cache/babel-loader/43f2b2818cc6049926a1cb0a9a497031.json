{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _dom = require('./utils/dom');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file modal-dialog.js\n */\n\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  _inherits(ModalDialog, _Component);\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n\n\n  function ModalDialog(player, options) {\n    _classCallCheck(this, ModalDialog);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n\n    _this.content(_this.options_.content); // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n\n\n    _this.contentEl_ = Dom.createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n    _this.descEl_ = Dom.createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-offscreen',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n    Dom.textContent(_this.descEl_, _this.description());\n\n    _this.el_.appendChild(_this.descEl_);\n\n    _this.el_.appendChild(_this.contentEl_);\n\n    return _this;\n  }\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  ModalDialog.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n\n  ModalDialog.prototype.label = function label() {\n    return this.options_.label || this.localize('Modal Window');\n  };\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.'); // Append a universal closeability message if the modal is closeable.\n\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  };\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n      /**\n       * Fired just before a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#beforemodalopen\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('beforemodalopen');\n      this.opened_ = true; // Fill content if the modal has never opened before and\n      // never been filled.\n\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      } // If the player was playing, pause it and take note of its previously\n      // playing state.\n\n\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n\n      player.controls(false);\n      this.show();\n      this.el().setAttribute('aria-hidden', 'false');\n      /**\n       * Fired just after a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#modalopen\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n\n    return this;\n  };\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n\n    return this.opened_;\n  };\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.close = function close() {\n    if (this.opened_) {\n      var player = this.player();\n      /**\n       * Fired just before a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#beforemodalclose\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('beforemodalclose');\n      this.opened_ = false;\n\n      if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n        player.play();\n      }\n\n      if (this.closeable()) {\n        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n\n      player.controls(true);\n      this.hide();\n      this.el().setAttribute('aria-hidden', 'true');\n      /**\n       * Fired just after a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#modalclose\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('modalclose');\n\n      if (this.options_.temporary) {\n        this.dispose();\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton'); // If this is being made closeable and has no close button, add one.\n\n      if (closeable && !close) {\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', {\n          controlText: 'Close Modal Dialog'\n        });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      } // If this is being made uncloseable and has a close button, remove it.\n\n\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n\n    return this.closeable_;\n  };\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.fill = function fill() {\n    return this.fillWith(this.content());\n  };\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param  {Mixed} [content]\n   *         The same rules apply to this as apply to the `content` option.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true; // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n\n    parentEl.removeChild(contentEl);\n    this.empty();\n    Dom.insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('modalfill'); // Re-inject the re-filled content element.\n\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    return this;\n  };\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    Dom.emptyEl(this.contentEl());\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('modalempty');\n    return this;\n  };\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n\n    return this.content_;\n  };\n\n  return ModalDialog;\n}(_component2['default']);\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n\n_component2['default'].registerComponent('ModalDialog', ModalDialog);\n\nexports['default'] = ModalDialog;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/modal-dialog.js"],"names":["exports","__esModule","_dom","require","Dom","_interopRequireWildcard","_fn","Fn","_component","_component2","_interopRequireDefault","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","MODAL_CLASS_NAME","ESC","ModalDialog","_Component","player","options","_this","opened_","hasBeenOpened_","hasBeenFilled_","closeable","options_","uncloseable","content","contentEl_","createEl","className","role","descEl_","id","el","getAttribute","textContent","description","el_","appendChild","buildCSSClass","tabIndex","label","handleKeyPress","e","which","close","localize","desc","open","trigger","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","on","ownerDocument","bind","controls","show","setAttribute","opened","play","off","hide","temporary","dispose","closeable_","getChild","temp","addChild","controlText","removeChild","fillWith","contentEl","parentEl","parentNode","nextSiblingEl","nextSibling","empty","insertContent","insertBefore","emptyEl","content_","registerComponent"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _dom = require('./utils/dom');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file modal-dialog.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  _inherits(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    _classCallCheck(this, ModalDialog);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n    _this.content(_this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    _this.contentEl_ = Dom.createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n\n    _this.descEl_ = Dom.createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-offscreen',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n\n    Dom.textContent(_this.descEl_, _this.description());\n    _this.el_.appendChild(_this.descEl_);\n    _this.el_.appendChild(_this.contentEl_);\n    return _this;\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  ModalDialog.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n\n  ModalDialog.prototype.label = function label() {\n    return this.options_.label || this.localize('Modal Window');\n  };\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  };\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n\n      /**\n       * Fired just before a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#beforemodalopen\n       * @type {EventTarget~Event}\n       */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n\n      player.controls(false);\n      this.show();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n       * Fired just after a `ModalDialog` is opened.\n       *\n       * @event ModalDialog#modalopen\n       * @type {EventTarget~Event}\n       */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n    return this;\n  };\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  };\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.close = function close() {\n    if (this.opened_) {\n      var player = this.player();\n\n      /**\n       * Fired just before a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#beforemodalclose\n       * @type {EventTarget~Event}\n       */\n      this.trigger('beforemodalclose');\n      this.opened_ = false;\n\n      if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n        player.play();\n      }\n\n      if (this.closeable()) {\n        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));\n      }\n\n      player.controls(true);\n      this.hide();\n      this.el().setAttribute('aria-hidden', 'true');\n\n      /**\n       * Fired just after a `ModalDialog` is closed.\n       *\n       * @event ModalDialog#modalclose\n       * @type {EventTarget~Event}\n       */\n      this.trigger('modalclose');\n\n      if (this.options_.temporary) {\n        this.dispose();\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  };\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.fill = function fill() {\n    return this.fillWith(this.content());\n  };\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param  {Mixed} [content]\n   *         The same rules apply to this as apply to the `content` option.\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    Dom.insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    return this;\n  };\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   *\n   * @return {ModalDialog}\n   *         Returns itself; method can be chained.\n   */\n\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    Dom.emptyEl(this.contentEl());\n\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalempty');\n    return this;\n  };\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  };\n\n  return ModalDialog;\n}(_component2['default']);\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n\n_component2['default'].registerComponent('ModalDialog', ModalDialog);\nexports['default'] = ModalDialog;\n"]},"metadata":{},"sourceType":"script"}