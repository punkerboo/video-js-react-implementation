{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _component = require('./component.js');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _document = require('global/document');\n\nvar _document2 = _interopRequireDefault(_document);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _events = require('./utils/events.js');\n\nvar Events = _interopRequireWildcard(_events);\n\nvar _dom = require('./utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _guid = require('./utils/guid.js');\n\nvar Guid = _interopRequireWildcard(_guid);\n\nvar _browser = require('./utils/browser.js');\n\nvar browser = _interopRequireWildcard(_browser);\n\nvar _log = require('./utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _toTitleCase = require('./utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _timeRanges = require('./utils/time-ranges.js');\n\nvar _buffer = require('./utils/buffer.js');\n\nvar _stylesheet = require('./utils/stylesheet.js');\n\nvar stylesheet = _interopRequireWildcard(_stylesheet);\n\nvar _fullscreenApi = require('./fullscreen-api.js');\n\nvar _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);\n\nvar _mediaError = require('./media-error.js');\n\nvar _mediaError2 = _interopRequireDefault(_mediaError);\n\nvar _tuple = require('safe-json-parse/tuple');\n\nvar _tuple2 = _interopRequireDefault(_tuple);\n\nvar _obj = require('./utils/obj');\n\nvar _mergeOptions = require('./utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nvar _textTrackListConverter = require('./tracks/text-track-list-converter.js');\n\nvar _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);\n\nvar _modalDialog = require('./modal-dialog');\n\nvar _modalDialog2 = _interopRequireDefault(_modalDialog);\n\nvar _tech = require('./tech/tech.js');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _audioTrackList = require('./tracks/audio-track-list.js');\n\nvar _audioTrackList2 = _interopRequireDefault(_audioTrackList);\n\nvar _videoTrackList = require('./tracks/video-track-list.js');\n\nvar _videoTrackList2 = _interopRequireDefault(_videoTrackList);\n\nrequire('./tech/loader.js');\n\nrequire('./tech/flash.js');\n\nrequire('./poster-image.js');\n\nrequire('./tracks/text-track-display.js');\n\nrequire('./loading-spinner.js');\n\nrequire('./big-play-button.js');\n\nrequire('./close-button.js');\n\nrequire('./control-bar/control-bar.js');\n\nrequire('./error-display.js');\n\nrequire('./tracks/text-track-settings.js');\n\nrequire('./tech/html5.js');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file player.js\n */\n// Subclasses Component\n// The following imports are used only to ensure that the corresponding modules\n// are always included in the video.js package. Importing the modules will\n// execute them and they will register themselves with video.js.\n// Import Html5 tech, at least for disposing the original video tag.\n// The following tech events are simply re-triggered\n// on the player when they happen\n\n\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event player#loadeddata\n * @type {event}\n */\n\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n/**\n * Fires when the current playback position has changed.\n *\n * @event player#timeupdate\n * @type {event}\n */\n\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n/**\n * Fires when the playing speed of the audio/video is changed\n *\n * @event player#ratechange\n * @type {event}\n */\n\n/**\n * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechRatechange_\n * @fires Player#ratechange\n * @listens Tech#ratechange\n */\n'ratechange',\n/**\n * Fires when the volume has been changed\n *\n * @event player#volumechange\n * @type {event}\n */\n\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n/**\n * Fires when the text track has been changed\n *\n * @event player#texttrackchange\n * @type {event}\n */\n\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  _inherits(Player, _Component);\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n\n\n  function Player(tag, options, ready) {\n    _classCallCheck(this, Player); // Make sure tag ID exists\n\n\n    tag.id = tag.id || 'vjs_video_' + Guid.newGUID(); // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n\n    options = (0, _obj.assign)(Player.getTagSettings(tag), options); // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n\n    options.initChildren = false; // Same with creating the element\n\n    options.createEl = false; // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n\n    options.reportTouchActivity = false; // If language is not set, get the closest lang attribute\n\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n\n          element = element.parentNode;\n        }\n      }\n    } // Run base component initializing with new options\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    } // Store the original tag used to set options\n\n\n    _this.tag = tag; // Store the tag attributes used to restore html5 element\n\n    _this.tagAttributes = tag && Dom.getElAttributes(tag); // Update current language\n\n    _this.language(_this.options_.language); // Update Supported Languages\n\n\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    } // Cache for video property values.\n\n\n    _this.cache_ = {}; // Set poster\n\n    _this.poster_ = options.poster || ''; // Set controls\n\n    _this.controls_ = !!options.controls; // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n\n    tag.controls = false;\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n\n    _this.scrubbing_ = false;\n    _this.el_ = _this.createEl(); // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n\n    var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_); // Load plugins\n\n    if (options.plugins) {\n      var plugins = options.plugins;\n      Object.getOwnPropertyNames(plugins).forEach(function (name) {\n        if (typeof this[name] === 'function') {\n          this[name](plugins[name]);\n        } else {\n          _log2['default'].error('Unable to find plugin:', name);\n        }\n      }, _this);\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n\n    _this.initChildren(); // Set isAudio based on whether or not an audio tag was used\n\n\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio'); // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n\n\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    } // Set ARIA label and region role depending on player type\n\n\n    _this.el_.setAttribute('role', 'region');\n\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', 'audio player');\n    } else {\n      _this.el_.setAttribute('aria-label', 'video player');\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    } // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n    // iOS Safari has broken hover handling\n\n\n    if (!browser.IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    } // Make player easily findable by ID\n\n\n    Player.players[_this.id_] = _this; // Add a major version class to aid css in plugins\n\n    var majorVersion = '5.20.5'.split('.')[0];\n\n    _this.addClass('vjs-v' + majorVersion); // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n\n\n    _this.userActive(true);\n\n    _this.reportUserActivity();\n\n    _this.listenForUserActivity_();\n\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n\n    _this.on('stageclick', _this.handleStageClick_);\n\n    return _this;\n  }\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose'); // prevent dispose from being called twice\n\n    this.off('dispose');\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n    } // Kill reference to this player\n\n\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n    }\n\n    _Component.prototype.dispose.call(this);\n  };\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  Player.prototype.createEl = function createEl() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    } // set tabindex to -1 so we could focus on the player element\n\n\n    tag.setAttribute('tabindex', '-1'); // Remove width/height attrs from tag so CSS can make it 100% width/height\n\n    tag.removeAttribute('width');\n    tag.removeAttribute('height'); // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n\n    var attrs = Dom.getElAttributes(tag);\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // workaround so we don't totally break IE7\n      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7\n      if (attr === 'class') {\n        el.className += ' ' + attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    }); // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech'; // Make player findable on elements\n\n    tag.player = el.player = this; // Default state of video is paused\n\n    this.addClass('vjs-paused'); // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');\n      var head = Dom.$('head');\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    } // Pass in the width/height/aspectRatio options which will update the style el\n\n\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio); // Hide any links within the video/audio tag, because IE doesn't hide them completely.\n\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n      Dom.addElClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    } // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n\n\n    tag.initNetworkState_ = tag.networkState; // Wrap video tag in div (el/box) container\n\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    } // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n\n\n    Dom.insertElFirst(tag, el);\n    this.children_.unshift(tag);\n    this.el_ = el;\n    return el;\n  };\n  /**\n   * A getter/setter for the `Player`'s width.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's width to.\n   *\n   * @return {number}\n   *         The current width of the `Player`.\n   */\n\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n  /**\n   * A getter/setter for the `Player`'s height.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's heigth to.\n   *\n   * @return {number}\n   *         The current heigth of the `Player`.\n   */\n\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {Player|number}\n   *         - Returns itself when setting; method can be chained.\n   *         - The dimension arguments value when getting (width/height).\n   */\n\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n    } else {\n      var parsedVal = parseFloat(value);\n\n      if (isNaN(parsedVal)) {\n        _log2['default'].error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n\n        return this;\n      }\n\n      this[privDimension] = parsedVal;\n    }\n\n    this.updateStyleEl_();\n    return this;\n  };\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  };\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    } // Check for width:height format\n\n\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n\n    this.aspectRatio_ = ratio; // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n\n    this.fluid(true);\n    this.updateStyleEl_();\n  };\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0; // The aspect ratio is either used directly or to calculate width and height.\n\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    } // Get the ratio as a decimal we can use to calculate dimensions\n\n\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    } // Ensure the CSS class is valid by starting with an alpha character\n\n\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    } // Ensure the right class is still on the player for the style element\n\n\n    this.addClass(idClass);\n    stylesheet.setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this; // Pause and remove current playback technology\n\n\n    if (this.tech_) {\n      this.unloadTech_();\n    } // get rid of the HTML5 video tag as soon as we are using another tech\n\n\n    if (techName !== 'Html5' && this.tag) {\n      _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);\n\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = techName; // Turn off API access because we're loading a new tech that might load asynchronously\n\n    this.isReady_ = false; // Grab tech-specific options from player options and add source and parent element to use.\n\n    var techOptions = (0, _obj.assign)({\n      source: source,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + techName + '_api',\n      'videoTracks': this.videoTracks_,\n      'textTracks': this.textTracks_,\n      'audioTracks': this.audioTracks_,\n      'autoplay': this.options_.autoplay,\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js']\n    }, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source) {\n      this.currentType_ = source.type;\n\n      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {\n        techOptions.startTime = this.cache_.currentTime;\n      }\n\n      this.cache_.sources = null;\n      this.cache_.source = source;\n      this.cache_.src = source.src;\n    } // Initialize tech instance\n\n\n    var TechComponent = _tech2['default'].getTech(techName); // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n\n\n    if (!TechComponent) {\n      TechComponent = _component2['default'].getComponent(techName);\n    }\n\n    this.tech_ = new TechComponent(techOptions); // player.triggerReady is always async, so don't need this to be async\n\n    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);\n\n    _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_); // Listen to all HTML5-defined events and trigger them on the player\n\n\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);\n    });\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);\n    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);\n    this.on(this.tech_, 'playing', this.handleTechPlaying_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'seeked', this.handleTechSeeked_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    } // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n\n\n    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {\n      Dom.insertElFirst(this.tech_.el(), this.el());\n    } // Get rid of the original video tag reference after the first tech is loaded\n\n\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    this.videoTracks_ = this.videoTracks();\n    this.textTracks_ = this.textTracks();\n    this.audioTracks_ = this.audioTracks();\n    this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);\n    this.isReady_ = false;\n    this.tech_.dispose();\n    this.tech_ = false;\n  };\n  /**\n   * Return a reference to the current {@link Tech}, but only if given an object with the\n   * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse\n   * of techs by plugins.\n   *\n   * @param {Object} safety\n   *        An object that must contain `{IWillNotUseThisInPlugins: true}`\n   *\n   * @param {boolean} safety.IWillNotUseThisInPlugins\n   *        Must be set to true or else this function will throw an error.\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety && safety.IWillNotUseThisInPlugins) {\n      return this.tech_;\n    }\n\n    var errorText = '\\n      Please make sure that you are not using this inside of a plugin.\\n      To disable this alert and error, please pass in an object with\\n      `IWillNotUseThisInPlugins` to the `tech` method. See\\n      https://github.com/videojs/video.js/issues/2617 for more info.\\n    ';\n\n    _window2['default'].alert(errorText);\n\n    throw new Error(errorText);\n  };\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_(); // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n\n    this.on(this.tech_, 'mousedown', this.handleTechClick_); // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_); // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n  };\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady(); // Keep the same volume as before\n\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    } // Look if the tech found a higher resolution poster while loading\n\n\n    this.handleTechPosterChange_(); // Update the duration if available\n\n    this.handleTechDurationChange_(); // Chrome and Safari both have issues with autoplay.\n    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.\n    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)\n    // This fixes both issues. Need to wait for API, so it updates displays correctly\n\n    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {\n      try {\n        // Chrome Fix. Fixed in Chrome v16.\n        delete this.tag.poster;\n      } catch (e) {\n        (0, _log2['default'])('deleting tag.poster throws in some browsers', e);\n      }\n\n      this.play();\n    }\n  };\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking'); // reset the error state\n\n    this.error(null); // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n  };\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} hasStarted\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted\n   */\n\n\n  Player.prototype.hasStarted = function hasStarted(_hasStarted) {\n    if (_hasStarted !== undefined) {\n      // only update if this is a new value\n      if (this.hasStarted_ !== _hasStarted) {\n        this.hasStarted_ = _hasStarted;\n\n        if (_hasStarted) {\n          this.addClass('vjs-has-started'); // trigger the firstplay event if this newly has played\n\n          this.trigger('firstplay');\n        } else {\n          this.removeClass('vjs-has-started');\n        }\n      }\n\n      return this;\n    }\n\n    return !!this.hasStarted_;\n  };\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing'); // hide the poster when the user hits play\n\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('play');\n  };\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this3 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this3.removeClass('vjs-waiting');\n    });\n  };\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('canplay');\n  };\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('canplaythrough');\n  };\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('playing');\n  };\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('seeking');\n  };\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('seeked');\n  };\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 passing the `starttime` option to the player will be deprecated\n   * @private\n   */\n\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      _log2['default'].warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('firstplay');\n  };\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('pause');\n  };\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('ended');\n  };\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    // We're using mousedown to detect clicks thanks to Flash, but mousedown\n    // will also be triggered with right-clicks, so we need to prevent that\n    if (event.button !== 0) {\n      return;\n    } // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n\n\n    if (this.controls()) {\n      if (this.paused()) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  };\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('fullscreenchange');\n  };\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n    this.error(error);\n  };\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('textdata', data);\n  };\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n    if (this.tech_ && !this.tech_.isReady_) {\n      this.tech_.ready(function () {\n        this[method](arg);\n      }, true); // Otherwise call method now\n    } else {\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        (0, _log2['default'])(e);\n        throw e;\n      }\n    }\n  };\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (this.tech_ && this.tech_.isReady_) {\n      // Flash likes to die and reload when you hide or reposition it.\n      // In these cases the object methods go away and we get errors.\n      // When that happens we'll catch the errors and inform tech that it's not ready any more.\n      try {\n        return this.tech_[method]();\n      } catch (e) {\n        // When building additional tech libs, an expected method may not be defined yet\n        if (this.tech_[method] === undefined) {\n          (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e); // When a method isn't available on the object it throws a TypeError\n        } else if (e.name === 'TypeError') {\n          (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n          this.tech_.isReady_ = false;\n        } else {\n          (0, _log2['default'])(e);\n        }\n\n        throw e;\n      }\n    }\n\n    return;\n  };\n  /**\n   * start media playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.play = function play() {\n    // Only calls the tech's play if we already have a src loaded\n    if (this.src() || this.currentSrc()) {\n      this.techCall_('play');\n    } else {\n      this.tech_.one('loadstart', function () {\n        this.play();\n      });\n    }\n\n    return this;\n  };\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n    return this;\n  };\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        wether the user is or is not scrubbing\n   *\n   * @return {boolean|Player}\n   *         A instance of the player that called this function when setting,\n   *         and the value of scrubbing when getting\n   */\n\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (isScrubbing !== undefined) {\n      this.scrubbing_ = !!isScrubbing;\n\n      if (isScrubbing) {\n        this.addClass('vjs-scrubbing');\n      } else {\n        this.removeClass('vjs-scrubbing');\n      }\n\n      return this;\n    }\n\n    return this.scrubbing_;\n  };\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {Player|number}\n   *         - the current time in seconds when getting\n   *         - a reference to the current player object when setting\n   */\n\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (seconds !== undefined) {\n      this.techCall_('setCurrentTime', seconds);\n      return this;\n    } // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n\n\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number|Player}\n   *         - The duration of the video in seconds when getting\n   *         - A reference to the player that called this function\n   *           when setting\n   */\n\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds); // Standardize on Inifity for signaling video is live\n\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n\n\n      this.trigger('durationchange');\n    }\n\n    return this;\n  };\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  }; //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = (0, _timeRanges.createTimeRange)(0, 0);\n    }\n\n    return buffered;\n  };\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is bufferred 0 being 0% and 1 being 100%\n   */\n\n\n  Player.prototype.bufferedPercent = function bufferedPercent() {\n    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());\n  };\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  };\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {Player|number}\n   *         a reference to the calling player when setting and the\n   *         current volume as a percent when getting\n   */\n\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n      return this;\n    } // Default to 1 when returning current volume.\n\n\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return this;\n    }\n\n    return this.techGet_('muted') || false;\n  };\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean|Player}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return this;\n    }\n\n    return !!this.isFullscreen_;\n  };\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(_document2['default'][fsApi.fullscreenElement]); // If cancelling fullscreen, remove event listener.\n\n        if (this.isFullscreen() === false) {\n          Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n\n\n        this.trigger('fullscreenchange');\n      }));\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('fullscreenchange');\n    }\n\n    return this;\n  };\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   *\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n    this.isFullscreen(false); // Check for browser element fullscreen support\n\n    if (fsApi.requestFullscreen) {\n      _document2['default'][fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n\n      this.trigger('fullscreenchange');\n    }\n\n    return this;\n  };\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true; // Storing original doc overflow value to return to when fullscreen is off\n\n    this.docOrigOverflow = _document2['default'].documentElement.style.overflow; // Add listener for esc key to exit fullscreen\n\n    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey)); // Hide any scroll bars\n\n    _document2['default'].documentElement.style.overflow = 'hidden'; // Apply fullscreen styles\n\n    Dom.addElClass(_document2['default'].body, 'vjs-full-window');\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('enterFullWindow');\n  };\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey); // Unhide scroll bars.\n\n    _document2['default'].documentElement.style.overflow = this.docOrigOverflow; // Remove fullscreen styles\n\n    Dom.removeElClass(_document2['default'].body, 'vjs-full-window'); // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('exitFullWindow');\n  };\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0; // Loop through each playback technology in the options order\n\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = (0, _toTitleCase2['default'])(j[i]);\n\n      var tech = _tech2['default'].getTech(techName); // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n\n\n      if (!tech) {\n        tech = _component2['default'].getComponent(techName);\n      } // Check if the current tech is defined before continuing\n\n\n      if (!tech) {\n        _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n\n        continue;\n      } // Check if the browser supports this technology\n\n\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  };\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this4 = this; // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n\n\n    var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {\n      // `Component.getComponent(...)` is for support of old behavior of techs\n      // being registered as components.\n      // Remove once that deprecated behavior is removed.\n      return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1]; // Check if the current tech is defined before continuing\n\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n\n      return false;\n    }); // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n      return found;\n    };\n\n    var foundSourceAndTech = void 0;\n\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {\n        return {\n          source: source,\n          tech: techName\n        };\n      }\n    }; // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n\n\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  };\n  /**\n   * The source function updates the video source\n   * There are three types of variables you can pass as the argument.\n   * **URL string**: A URL to the the video file. Use this method if you are sure\n   * the current playback technology (HTML5/Flash) can support the source you\n   * provide. Currently only MP4 files can be used in both HTML5 and Flash.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]} [source]\n   *        One SourceObject or an array of SourceObjects\n   *\n   * @return {string|Player}\n   *         - The current video source when getting\n   *         - The player when setting\n   */\n\n\n  Player.prototype.src = function src(source) {\n    if (source === undefined) {\n      return this.techGet_('src');\n    }\n\n    var currentTech = _tech2['default'].getTech(this.techName_); // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n\n\n    if (!currentTech) {\n      currentTech = _component2['default'].getComponent(this.techName_);\n    } // case: Array of source objects to choose from and pick the best to play\n\n\n    if (Array.isArray(source)) {\n      this.sourceList_(source); // case: URL String (http://myvideo...)\n    } else if (typeof source === 'string') {\n      // create a source object from the string\n      this.src({\n        src: source\n      }); // case: Source object { src: '', type: '' ... }\n    } else if (source instanceof Object) {\n      // check if the source has a type and the loaded tech cannot play the source\n      // if there's no type we'll just try the current tech\n      if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {\n        // create a source list with the current source and send through\n        // the tech loop to check for a compatible technology\n        this.sourceList_([source]);\n      } else {\n        this.cache_.sources = null;\n        this.cache_.source = source;\n        this.cache_.src = source.src;\n        this.currentType_ = source.type || ''; // wait until the tech is ready to set the source\n\n        this.ready(function () {\n          // The setSource tech method was added with source handlers\n          // so older techs won't support it\n          // We need to check the direct prototype for the case where subclasses\n          // of the tech do not support source handlers\n          if (currentTech.prototype.hasOwnProperty('setSource')) {\n            this.techCall_('setSource', source);\n          } else {\n            this.techCall_('src', source.src);\n          }\n\n          if (this.options_.preload === 'auto') {\n            this.load();\n          }\n\n          if (this.options_.autoplay) {\n            this.play();\n          } // Set the source synchronously if possible (#2326)\n\n        }, true);\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Handle an array of source objects\n   *\n   * @param  {Tech~SourceObject[]} sources\n   *         Array of source objects\n   *\n   * @private\n   */\n\n\n  Player.prototype.sourceList_ = function sourceList_(sources) {\n    var sourceTech = this.selectSource(sources);\n\n    if (sourceTech) {\n      if (sourceTech.tech === this.techName_) {\n        // if this technology is already loaded, set the source\n        this.src(sourceTech.source);\n      } else {\n        // load this technology with the chosen source\n        this.loadTech_(sourceTech.tech, sourceTech.source);\n      }\n\n      this.cache_.sources = sources;\n    } else {\n      // We need to wrap this in a timeout to give folks a chance to add error event handlers\n      this.setTimeout(function () {\n        this.error({\n          code: 4,\n          message: this.localize(this.options_.notSupportedMessage)\n        });\n      }, 0); // we could not find an appropriate tech, but let's still notify the delegate that this is it\n      // this needs a better comment about why this is needed\n\n      this.triggerReady();\n    }\n  };\n  /**\n   * Begin loading the src data.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n    return this;\n  };\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n\n  Player.prototype.reset = function reset() {\n    this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);\n    this.techCall_('reset');\n    return this;\n  };\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = []; // assume `{}` or `{ src }`\n\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  };\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n\n  Player.prototype.currentSource = function currentSource() {\n    var source = {};\n    var src = this.currentSrc();\n\n    if (src) {\n      source.src = src;\n    }\n\n    return this.cache_.source || source;\n  };\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.techGet_('currentSrc') || this.cache_.src || '';\n  };\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentType_ || '';\n  };\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false maens that we should not preload\n   *\n   * @return {string|Player}\n   *         - the preload attribute value when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return this;\n    }\n\n    return this.techGet_('preload');\n  };\n  /**\n   * Get or set the autoplay attribute.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should autoplay\n   *        - false maens that we should not autoplay\n   *\n   * @return {string|Player}\n   *         - the current value of autoplay\n   *         - the player when setting\n   */\n\n\n  Player.prototype.autoplay = function autoplay(value) {\n    if (value !== undefined) {\n      this.techCall_('setAutoplay', value);\n      this.options_.autoplay = value;\n      return this;\n    }\n\n    return this.techGet_('autoplay', value);\n  };\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n\n    return this.techGet_('playsinline');\n  };\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string|Player}\n   *         - the current value of loop when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return this;\n    }\n\n    return this.techGet_('loop');\n  };\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string|Player}\n   *         - the current value of poster when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    } // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n\n\n    if (!src) {\n      src = '';\n    } // update the internal poster variable\n\n\n    this.poster_ = src; // update the tech's poster\n\n    this.techCall_('setPoster', src); // alert components that the poster has been set\n\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n\n    this.trigger('posterchange');\n    return this;\n  };\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * soruce if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if (!this.poster_ && this.tech_ && this.tech_.poster) {\n      this.poster_ = this.tech_.poster() || ''; // Let components know the poster has changed\n\n      this.trigger('posterchange');\n    }\n  };\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of controls when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool; // Don't trigger a change event unless it actually changed\n\n      if (this.controls_ !== bool) {\n        this.controls_ = bool;\n\n        if (this.usingNativeControls()) {\n          this.techCall_('setControls', bool);\n        }\n\n        if (bool) {\n          this.removeClass('vjs-controls-disabled');\n          this.addClass('vjs-controls-enabled');\n          /**\n           * @event Player#controlsenabled\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('controlsenabled');\n\n          if (!this.usingNativeControls()) {\n            this.addTechControlsListeners_();\n          }\n        } else {\n          this.removeClass('vjs-controls-enabled');\n          this.addClass('vjs-controls-disabled');\n          /**\n           * @event Player#controlsdisabled\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('controlsdisabled');\n\n          if (!this.usingNativeControls()) {\n            this.removeTechControlsListeners_();\n          }\n        }\n      }\n\n      return this;\n    }\n\n    return !!this.controls_;\n  };\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of native controls when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool; // Don't trigger a change event unless it actually changed\n\n      if (this.usingNativeControls_ !== bool) {\n        this.usingNativeControls_ = bool;\n\n        if (bool) {\n          this.addClass('vjs-using-native-controls');\n          /**\n           * player is using the native device controls\n           *\n           * @event Player#usingnativecontrols\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('usingnativecontrols');\n        } else {\n          this.removeClass('vjs-using-native-controls');\n          /**\n           * player is using the custom HTML controls\n           *\n           * @event Player#usingcustomcontrols\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('usingcustomcontrols');\n        }\n      }\n\n      return this;\n    }\n\n    return !!this.usingNativeControls_;\n  };\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null|Player}\n   *         - The current MediaError when getting (or null)\n   *         - The player when setting\n   */\n\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    } // restoring to default\n\n\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n\n      return this;\n    }\n\n    this.error_ = new _mediaError2['default'](err); // add the vjs-error classname to the player\n\n    this.addClass('vjs-error'); // log the name of the error type and any message\n    // ie8 just logs \"[object object]\" if you just log the error object\n\n    _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n\n\n    this.trigger('error');\n    return this;\n  };\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   * @return {boolean|Player}\n   *         - the current value of userActive when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      if (bool !== this.userActive_) {\n        this.userActive_ = bool;\n\n        if (bool) {\n          // If the user was inactive and is now active we want to reset the\n          // inactivity timer\n          this.userActivity_ = true;\n          this.removeClass('vjs-user-inactive');\n          this.addClass('vjs-user-active');\n          /**\n           * @event Player#useractive\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('useractive');\n        } else {\n          // We're switching the state to inactive manually, so erase any other\n          // activity\n          this.userActivity_ = false; // Chrome/Safari/IE have bugs where when you change the cursor it can\n          // trigger a mousemove event. This causes an issue when you're hiding\n          // the cursor when the user is inactive, and a mousemove signals user\n          // activity. Making it impossible to go into inactive mode. Specifically\n          // this happens in fullscreen when we really need to hide the cursor.\n          //\n          // When this gets resolved in ALL browsers it can be removed\n          // https://code.google.com/p/chromium/issues/detail?id=103041\n\n          if (this.tech_) {\n            this.tech_.one('mousemove', function (e) {\n              e.stopPropagation();\n              e.preventDefault();\n            });\n          }\n\n          this.removeClass('vjs-user-active');\n          this.addClass('vjs-user-inactive');\n          /**\n           * @event Player#userinactive\n           * @type {EventTarget~Event}\n           */\n\n          this.trigger('userinactive');\n        }\n      }\n\n      return this;\n    }\n\n    return this.userActive_;\n  };\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = Fn.bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity(); // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n\n      this.clearInterval(mouseInProgress); // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity(); // Stop the interval that maintains activity if the mouse/touch is down\n\n      this.clearInterval(mouseInProgress);\n    }; // Any mouse movement will be considered user activity\n\n\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp); // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity); // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n\n    var inactivityTimeout = void 0;\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (this.userActivity_) {\n        // Reset the activity tracker\n        this.userActivity_ = false; // If the user state was inactive, set the state to active\n\n        this.userActive(true); // Clear any existing inactivity timeout to start the timer over\n\n        this.clearTimeout(inactivityTimeout);\n        var timeout = this.options_.inactivityTimeout;\n\n        if (timeout > 0) {\n          // In <timeout> milliseconds, if no more activity has occurred the\n          // user will be considered inactive\n          inactivityTimeout = this.setTimeout(function () {\n            // Protect against the case where the inactivityTimeout can trigger just\n            // before the next user activity is picked up by the activity check loop\n            // causing a flicker\n            if (!this.userActivity_) {\n              this.userActive(false);\n            }\n          }, timeout);\n        }\n      }\n    }, 250);\n  };\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The current playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      this.techCall_('setPlaybackRate', rate);\n      return this;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('playbackRate');\n    }\n\n    return 1.0;\n  };\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {Player|boolean}\n   *         - the current value of isAudio when getting\n   *         - the player if setting\n   */\n\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return this;\n    }\n\n    return !!this.isAudio_;\n  };\n  /**\n   * Get the {@link VideoTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n   *\n   * @return {VideoTrackList}\n   *         the current video track list\n   */\n\n\n  Player.prototype.videoTracks = function videoTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();\n      return this.videoTracks_;\n    }\n\n    return this.tech_.videoTracks();\n  };\n  /**\n   * Get the {@link AudioTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n   *\n   * @return {AudioTrackList}\n   *         the current audio track list\n   */\n\n\n  Player.prototype.audioTracks = function audioTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();\n      return this.audioTracks_;\n    }\n\n    return this.tech_.audioTracks();\n  };\n  /**\n   * Get the {@link TextTrackList}\n   *\n   * Text tracks are tracks of timed text events.\n   * - Captions: text displayed over the video\n   *             for the hearing impaired\n   * - Subtitles: text displayed over the video for\n   *              those who don't understand language in the video\n   * - Chapters: text displayed in a menu allowing the user to jump\n   *             to particular points (chapters) in the video\n   * - Descriptions: (not yet implemented) audio descriptions that are read back to\n   *                 the user by a screen reading device\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n   *\n   * @return {TextTrackList|undefined}\n   *         The current TextTrackList or undefined if\n   *         or undefined if we don't have a tech\n   */\n\n\n  Player.prototype.textTracks = function textTracks() {\n    // cannot use techGet_ directly because it checks to see whether the tech is ready.\n    // Flash is unlikely to be ready in time but textTracks should still work.\n    if (this.tech_) {\n      return this.tech_.textTracks();\n    }\n  };\n  /**\n   * Get the \"remote\" {@link TextTrackList}. Remote Text Tracks\n   * are tracks that were added to the HTML video element and can\n   * be removed, whereas normal texttracks cannot be removed.\n   *\n   *\n   * @return {TextTrackList|undefined}\n   *         The current remote text track list or undefined\n   *         if we don't have a tech\n   */\n\n\n  Player.prototype.remoteTextTracks = function remoteTextTracks() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTracks();\n    }\n  };\n  /**\n   * Get the \"remote\" {@link HTMLTrackElementList}.\n   * This gives the user all of the DOM elements that match up\n   * with the remote {@link TextTrackList}.\n   *\n   * @return {HTMLTrackElementList}\n   *         The current remote text track list elements\n   *         or undefined if we don't have a tech\n   */\n\n\n  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTrackEls();\n    }\n  };\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HTMLTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HTMLTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HTMLTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$track = _ref3.track,\n        track = _ref3$track === undefined ? arguments[0] : _ref3$track; // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  }; // Methods to add support for\n  // initialTime: function() { return this.techCall_('initialTime'); },\n  // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },\n  // played: function() { return this.techCall_('played'); },\n  // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },\n  // defaultMuted: function() { return this.techCall_('defaultMuted'); }\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the lanugage\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string|Player}\n   *         - The current language code when getting\n   *         - A reference to the player when setting\n   */\n\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n    return this;\n  };\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n\n  Player.prototype.languages = function languages() {\n    return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);\n  };\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = (0, _mergeOptions2['default'])(this.options_);\n    var tracks = options.tracks;\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i]; // deep merge tracks and null out player so no circular references\n\n      track = (0, _mergeOptions2['default'])(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  };\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this5 = this;\n\n    options = options || {};\n    options.content = content || '';\n    var modal = new _modalDialog2['default'](this, options);\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this5.removeChild(modal);\n    });\n    return modal.open();\n  };\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n    var tagOptions = Dom.getElAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (Dom.hasElClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    } // Check if data-setup attr exists.\n\n\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        _log2['default'].error(err);\n      }\n\n      (0, _obj.assign)(tagOptions, data);\n    }\n\n    (0, _obj.assign)(baseOptions, tagOptions); // Get tag children settings\n\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i]; // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(Dom.getElAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(Dom.getElAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  };\n  /**\n   * Determine wether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = _document2['default'].createElement('i'); // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n\n\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || // IE10-specific (2012 flex spec)\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(_component2['default']);\n/**\n * Global player list\n *\n * @type {Object}\n */\n\n\nPlayer.players = {};\nvar navigator = _window2['default'].navigator;\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\n\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: ['html5', 'flash'],\n  // techOrder: ['flash','html5'],\n  html5: {},\n  flash: {},\n  // defaultVolume: 0.85,\n  defaultVolume: 0.00,\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n  // locales and their language translations\n  languages: {},\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n_component2['default'].registerComponent('Player', Player);\n\nexports['default'] = Player;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/player.js"],"names":["exports","__esModule","_component","require","_component2","_interopRequireDefault","_document","_document2","_window","_window2","_events","Events","_interopRequireWildcard","_dom","Dom","_fn","Fn","_guid","Guid","_browser","browser","_log","_log2","_toTitleCase","_toTitleCase2","_timeRanges","_buffer","_stylesheet","stylesheet","_fullscreenApi","_fullscreenApi2","_mediaError","_mediaError2","_tuple","_tuple2","_obj","_mergeOptions","_mergeOptions2","_textTrackListConverter","_textTrackListConverter2","_modalDialog","_modalDialog2","_tech","_tech2","_audioTrackList","_audioTrackList2","_videoTrackList","_videoTrackList2","obj","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","TECH_EVENTS_RETRIGGER","Player","_Component","tag","options","ready","id","newGUID","assign","getTagSettings","initChildren","createEl","reportTouchActivity","language","closest","getAttribute","element","nodeType","getElAttributes","parentNode","_this","options_","techOrder","length","Error","tagAttributes","languages","languagesToLower","getOwnPropertyNames","forEach","name","toLowerCase","languages_","cache_","poster_","poster","controls_","controls","scrubbing_","el_","playerOptionsCopy","plugins","error","playerOptions","isAudio","nodeName","addClass","setAttribute","flexNotSupported_","IS_IOS","players","id_","majorVersion","split","userActive","reportUserActivity","listenForUserActivity_","on","handleFullscreenChange_","handleStageClick_","dispose","trigger","off","styleEl_","removeChild","player","tech_","el","playerElIngest","playerElIngest_","hasAttribute","removeAttribute","attrs","attr","className","playerId","VIDEOJS_NO_DYNAMIC_STYLE","createStyleElement","defaultsStyleEl","$","head","insertBefore","nextSibling","firstChild","width","height","fluid","aspectRatio","links","getElementsByTagName","i","linkEl","item","addElClass","initNetworkState_","networkState","insertElFirst","children_","unshift","dimension","_dimension","privDimension","undefined","parsedVal","parseFloat","isNaN","updateStyleEl_","bool","fluid_","removeClass","ratio","aspectRatio_","test","_width","width_","_height","height_","techEl","idClass","videoWidth","videoHeight","ratioParts","ratioMultiplier","setTextContent","loadTech_","techName","source","_this2","unloadTech_","getTech","disposeMediaElement","techName_","isReady_","techOptions","nativeControlsForTouch","videoTracks_","textTracks_","audioTracks_","autoplay","playsinline","preload","loop","muted","currentType_","type","src","currentTime","startTime","sources","TechComponent","getComponent","bind","handleTechReady_","jsonToTextTracks","textTracksJson_","event","handleTechLoadStart_","handleTechWaiting_","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechEnded_","handleTechSeeking_","handleTechSeeked_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechError_","handleTechPosterChange_","handleTechTextData_","usingNativeControls","techGet_","addTechControlsListeners_","videoTracks","textTracks","audioTracks","textTracksToJson","tech","safety","IWillNotUseThisInPlugins","errorText","alert","removeTechControlsListeners_","handleTechClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","triggerReady","volume","techCall_","currentSrc","paused","e","play","hasStarted","_hasStarted","hasStarted_","_this3","one","starttime","warn","pause","duration","button","userWasActive","preventDefault","isFullscreen","data","arguments","getCache","method","arg","scrubbing","isScrubbing","seconds","NaN","Infinity","remainingTime","buffered","createTimeRange","bufferedPercent","bufferedEnd","end","percentAsDecimal","vol","Math","max","min","_muted","supportsFullScreen","isFS","isFullscreen_","requestFullscreen","fsApi","fullscreenchange","documentFullscreenChange","fullscreenElement","enterFullWindow","exitFullscreen","exitFullWindow","isFullWindow","docOrigOverflow","documentElement","style","overflow","fullWindowOnEscKey","body","keyCode","removeElClass","canPlayType","can","j","isSupported","selectSource","_this4","techs","map","filter","_ref","findFirstPassingTechSourcePair","outerArray","innerArray","tester","found","some","outerChoice","innerChoice","foundSourceAndTech","flip","fn","a","b","finder","_ref2","canPlaySource","sourceOrder","currentTech","Array","isArray","sourceList_","load","sourceTech","setTimeout","code","message","localize","notSupportedMessage","reset","currentSources","currentSource","keys","push","currentType","usingNativeControls_","err","error_","errorDisplay","close","errorTypes","userActivity_","userActive_","stopPropagation","mouseInProgress","lastMoveX","lastMoveY","handleActivity","handleMouseMove","screenX","screenY","handleMouseDown","clearInterval","setInterval","handleMouseUp","inactivityTimeout","clearTimeout","timeout","playbackRate","rate","featuresPlaybackRate","isAudio_","remoteTextTracks","remoteTextTrackEls","addTextTrack","kind","label","addRemoteTextTrack","manualCleanup","removeRemoteTextTrack","_ref3","_ref3$track","track","getVideoPlaybackQuality","language_","String","toJSON","tracks","createModal","content","_this5","modal","addChild","open","baseOptions","tagOptions","dataSetup","hasElClass","_safeParseTuple","hasChildNodes","children","childNodes","child","childName","elem","createElement","navigator","html5","flash","defaultVolume","playbackRates","userLanguage","registerComponent"],"mappings":"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,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAEJ,QAAT;AAAmBK,MAAAA,UAAU,EAAE,KAA/B;AAAsCC,MAAAA,QAAQ,EAAE,IAAhD;AAAsDC,MAAAA,YAAY,EAAE;AAApE;AAAf,GAAlD,CAArB;AAAqK,MAAIN,UAAJ,EAAgBb,MAAM,CAACoB,cAAP,GAAwBpB,MAAM,CAACoB,cAAP,CAAsBR,QAAtB,EAAgCC,UAAhC,CAAxB,GAAsED,QAAQ,CAACS,SAAT,GAAqBR,UAA3F;AAAwG;AAAC;AAC/e;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;;;AACA,IAAIS,qBAAqB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAf4B;AAiB5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA/B4B;AAiC5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA/C4B;AAiD5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA/D4B;AAgE5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA9E4B;AAgF5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBA9F4B;AAgG5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA9G4B;AAgH5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA9H4B;AAgI5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YA9I4B;AAgJ5B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _component = require('./component.js');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _document = require('global/document');\n\nvar _document2 = _interopRequireDefault(_document);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _events = require('./utils/events.js');\n\nvar Events = _interopRequireWildcard(_events);\n\nvar _dom = require('./utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _fn = require('./utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _guid = require('./utils/guid.js');\n\nvar Guid = _interopRequireWildcard(_guid);\n\nvar _browser = require('./utils/browser.js');\n\nvar browser = _interopRequireWildcard(_browser);\n\nvar _log = require('./utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _toTitleCase = require('./utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nvar _timeRanges = require('./utils/time-ranges.js');\n\nvar _buffer = require('./utils/buffer.js');\n\nvar _stylesheet = require('./utils/stylesheet.js');\n\nvar stylesheet = _interopRequireWildcard(_stylesheet);\n\nvar _fullscreenApi = require('./fullscreen-api.js');\n\nvar _fullscreenApi2 = _interopRequireDefault(_fullscreenApi);\n\nvar _mediaError = require('./media-error.js');\n\nvar _mediaError2 = _interopRequireDefault(_mediaError);\n\nvar _tuple = require('safe-json-parse/tuple');\n\nvar _tuple2 = _interopRequireDefault(_tuple);\n\nvar _obj = require('./utils/obj');\n\nvar _mergeOptions = require('./utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nvar _textTrackListConverter = require('./tracks/text-track-list-converter.js');\n\nvar _textTrackListConverter2 = _interopRequireDefault(_textTrackListConverter);\n\nvar _modalDialog = require('./modal-dialog');\n\nvar _modalDialog2 = _interopRequireDefault(_modalDialog);\n\nvar _tech = require('./tech/tech.js');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _audioTrackList = require('./tracks/audio-track-list.js');\n\nvar _audioTrackList2 = _interopRequireDefault(_audioTrackList);\n\nvar _videoTrackList = require('./tracks/video-track-list.js');\n\nvar _videoTrackList2 = _interopRequireDefault(_videoTrackList);\n\nrequire('./tech/loader.js');\n\nrequire('./tech/flash.js');\n\nrequire('./poster-image.js');\n\nrequire('./tracks/text-track-display.js');\n\nrequire('./loading-spinner.js');\n\nrequire('./big-play-button.js');\n\nrequire('./close-button.js');\n\nrequire('./control-bar/control-bar.js');\n\nrequire('./error-display.js');\n\nrequire('./tracks/text-track-settings.js');\n\nrequire('./tech/html5.js');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file player.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n// Subclasses Component\n\n\n// The following imports are used only to ensure that the corresponding modules\n// are always included in the video.js package. Importing the modules will\n// execute them and they will register themselves with video.js.\n\n\n// Import Html5 tech, at least for disposing the original video tag.\n\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n\n/**\n * Fires when the current playback position has changed.\n *\n * @event player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n\n/**\n * Fires when the playing speed of the audio/video is changed\n *\n * @event player#ratechange\n * @type {event}\n */\n/**\n * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechRatechange_\n * @fires Player#ratechange\n * @listens Tech#ratechange\n */\n'ratechange',\n\n/**\n * Fires when the volume has been changed\n *\n * @event player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n\n/**\n * Fires when the text track has been changed\n *\n * @event player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  _inherits(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    _classCallCheck(this, Player);\n\n    // Make sure tag ID exists\n    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = (0, _obj.assign)(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n          element = element.parentNode;\n        }\n      }\n    }\n\n    // Run base component initializing with new options\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    var _this = _possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    _this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    _this.tagAttributes = tag && Dom.getElAttributes(tag);\n\n    // Update current language\n    _this.language(_this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    // Cache for video property values.\n    _this.cache_ = {};\n\n    // Set poster\n    _this.poster_ = options.poster || '';\n\n    // Set controls\n    _this.controls_ = !!options.controls;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    _this.scrubbing_ = false;\n\n    _this.el_ = _this.createEl();\n\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    var playerOptionsCopy = (0, _mergeOptions2['default'])(_this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      var plugins = options.plugins;\n\n      Object.getOwnPropertyNames(plugins).forEach(function (name) {\n        if (typeof this[name] === 'function') {\n          this[name](plugins[name]);\n        } else {\n          _log2['default'].error('Unable to find plugin:', name);\n        }\n      }, _this);\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n\n    _this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    _this.el_.setAttribute('role', 'region');\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', 'audio player');\n    } else {\n      _this.el_.setAttribute('aria-label', 'video player');\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n\n    // iOS Safari has broken hover handling\n    if (!browser.IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[_this.id_] = _this;\n\n    // Add a major version class to aid css in plugins\n    var majorVersion = '5.20.5'.split('.')[0];\n\n    _this.addClass('vjs-v' + majorVersion);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    _this.userActive(true);\n    _this.reportUserActivity();\n    _this.listenForUserActivity_();\n\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n    _this.on('stageclick', _this.handleStageClick_);\n    return _this;\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n    }\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  Player.prototype.createEl = function createEl() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    }\n\n    // set tabindex to -1 so we could focus on the player element\n    tag.setAttribute('tabindex', '-1');\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    var attrs = Dom.getElAttributes(tag);\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // workaround so we don't totally break IE7\n      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7\n      if (attr === 'class') {\n        el.className += ' ' + attrs[attr];\n      } else {\n        el.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');\n      var head = Dom.$('head');\n\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n\n    // Hide any links within the video/audio tag, because IE doesn't hide them completely.\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n\n      Dom.addElClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    Dom.insertElFirst(tag, el);\n    this.children_.unshift(tag);\n\n    this.el_ = el;\n\n    return el;\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's width to.\n   *\n   * @return {number}\n   *         The current width of the `Player`.\n   */\n\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s height.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player's heigth to.\n   *\n   * @return {number}\n   *         The current heigth of the `Player`.\n   */\n\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {Player|number}\n   *         - Returns itself when setting; method can be chained.\n   *         - The dimension arguments value when getting (width/height).\n   */\n\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n    } else {\n      var parsedVal = parseFloat(value);\n\n      if (isNaN(parsedVal)) {\n        _log2['default'].error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n        return this;\n      }\n\n      this[privDimension] = parsedVal;\n    }\n\n    this.updateStyleEl_();\n    return this;\n  };\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (_window2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n\n    stylesheet.setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (techName !== 'Html5' && this.tag) {\n      _tech2['default'].getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = techName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    var techOptions = (0, _obj.assign)({\n      source: source,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + techName + '_api',\n      'videoTracks': this.videoTracks_,\n      'textTracks': this.textTracks_,\n      'audioTracks': this.audioTracks_,\n      'autoplay': this.options_.autoplay,\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js']\n    }, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source) {\n      this.currentType_ = source.type;\n\n      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {\n        techOptions.startTime = this.cache_.currentTime;\n      }\n\n      this.cache_.sources = null;\n      this.cache_.source = source;\n      this.cache_.src = source.src;\n    }\n\n    // Initialize tech instance\n    var TechComponent = _tech2['default'].getTech(techName);\n\n    // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n    if (!TechComponent) {\n      TechComponent = _component2['default'].getComponent(techName);\n    }\n    this.tech_ = new TechComponent(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);\n\n    _textTrackListConverter2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + (0, _toTitleCase2['default'])(event) + '_']);\n    });\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);\n    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);\n    this.on(this.tech_, 'playing', this.handleTechPlaying_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'seeked', this.handleTechSeeked_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {\n      Dom.insertElFirst(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    this.videoTracks_ = this.videoTracks();\n    this.textTracks_ = this.textTracks();\n    this.audioTracks_ = this.audioTracks();\n    this.textTracksJson_ = _textTrackListConverter2['default'].textTracksToJson(this.tech_);\n\n    this.isReady_ = false;\n\n    this.tech_.dispose();\n\n    this.tech_ = false;\n  };\n\n  /**\n   * Return a reference to the current {@link Tech}, but only if given an object with the\n   * `IWillNotUseThisInPlugins` property having a true value. This is try and prevent misuse\n   * of techs by plugins.\n   *\n   * @param {Object} safety\n   *        An object that must contain `{IWillNotUseThisInPlugins: true}`\n   *\n   * @param {boolean} safety.IWillNotUseThisInPlugins\n   *        Must be set to true or else this function will throw an error.\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety && safety.IWillNotUseThisInPlugins) {\n      return this.tech_;\n    }\n    var errorText = '\\n      Please make sure that you are not using this inside of a plugin.\\n      To disable this alert and error, please pass in an object with\\n      `IWillNotUseThisInPlugins` to the `tech` method. See\\n      https://github.com/videojs/video.js/issues/2617 for more info.\\n    ';\n\n    _window2['default'].alert(errorText);\n    throw new Error(errorText);\n  };\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n\n    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n  };\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n\n    // Chrome and Safari both have issues with autoplay.\n    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.\n    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)\n    // This fixes both issues. Need to wait for API, so it updates displays correctly\n    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {\n      try {\n        // Chrome Fix. Fixed in Chrome v16.\n        delete this.tag.poster;\n      } catch (e) {\n        (0, _log2['default'])('deleting tag.poster throws in some browsers', e);\n      }\n      this.play();\n    }\n  };\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n  };\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} hasStarted\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted\n   */\n\n\n  Player.prototype.hasStarted = function hasStarted(_hasStarted) {\n    if (_hasStarted !== undefined) {\n      // only update if this is a new value\n      if (this.hasStarted_ !== _hasStarted) {\n        this.hasStarted_ = _hasStarted;\n        if (_hasStarted) {\n          this.addClass('vjs-has-started');\n          // trigger the firstplay event if this newly has played\n          this.trigger('firstplay');\n        } else {\n          this.removeClass('vjs-has-started');\n        }\n      }\n      return this;\n    }\n    return !!this.hasStarted_;\n  };\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n    this.trigger('play');\n  };\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this3 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this3.removeClass('vjs-waiting');\n    });\n  };\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplay');\n  };\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplaythrough');\n  };\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n    this.trigger('playing');\n  };\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeking');\n  };\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeked');\n  };\n\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 passing the `starttime` option to the player will be deprecated\n   * @private\n   */\n\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      _log2['default'].warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('firstplay');\n  };\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n    this.trigger('pause');\n  };\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n    this.trigger('ended');\n  };\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    // We're using mousedown to detect clicks thanks to Flash, but mousedown\n    // will also be triggered with right-clicks, so we need to prevent that\n    if (event.button !== 0) {\n      return;\n    }\n\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (this.controls()) {\n      if (this.paused()) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    }\n  };\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('fullscreenchange');\n  };\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n\n    this.error(error);\n  };\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n    this.trigger('textdata', data);\n  };\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n    if (this.tech_ && !this.tech_.isReady_) {\n      this.tech_.ready(function () {\n        this[method](arg);\n      }, true);\n\n      // Otherwise call method now\n    } else {\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        (0, _log2['default'])(e);\n        throw e;\n      }\n    }\n  };\n\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (this.tech_ && this.tech_.isReady_) {\n\n      // Flash likes to die and reload when you hide or reposition it.\n      // In these cases the object methods go away and we get errors.\n      // When that happens we'll catch the errors and inform tech that it's not ready any more.\n      try {\n        return this.tech_[method]();\n      } catch (e) {\n        // When building additional tech libs, an expected method may not be defined yet\n        if (this.tech_[method] === undefined) {\n          (0, _log2['default'])('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);\n\n          // When a method isn't available on the object it throws a TypeError\n        } else if (e.name === 'TypeError') {\n          (0, _log2['default'])('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n          this.tech_.isReady_ = false;\n        } else {\n          (0, _log2['default'])(e);\n        }\n        throw e;\n      }\n    }\n\n    return;\n  };\n\n  /**\n   * start media playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.play = function play() {\n    // Only calls the tech's play if we already have a src loaded\n    if (this.src() || this.currentSrc()) {\n      this.techCall_('play');\n    } else {\n      this.tech_.one('loadstart', function () {\n        this.play();\n      });\n    }\n\n    return this;\n  };\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n    return this;\n  };\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        wether the user is or is not scrubbing\n   *\n   * @return {boolean|Player}\n   *         A instance of the player that called this function when setting,\n   *         and the value of scrubbing when getting\n   */\n\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (isScrubbing !== undefined) {\n      this.scrubbing_ = !!isScrubbing;\n\n      if (isScrubbing) {\n        this.addClass('vjs-scrubbing');\n      } else {\n        this.removeClass('vjs-scrubbing');\n      }\n\n      return this;\n    }\n\n    return this.scrubbing_;\n  };\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {Player|number}\n   *         - the current time in seconds when getting\n   *         - a reference to the current player object when setting\n   */\n\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (seconds !== undefined) {\n\n      this.techCall_('setCurrentTime', seconds);\n\n      return this;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number|Player}\n   *         - The duration of the video in seconds when getting\n   *         - A reference to the player that called this function\n   *           when setting\n   */\n\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds);\n\n    // Standardize on Inifity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('durationchange');\n    }\n\n    return this;\n  };\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  };\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = (0, _timeRanges.createTimeRange)(0, 0);\n    }\n\n    return buffered;\n  };\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is bufferred 0 being 0% and 1 being 100%\n   */\n\n\n  Player.prototype.bufferedPercent = function bufferedPercent() {\n    return (0, _buffer.bufferedPercent)(this.buffered(), this.duration());\n  };\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  };\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {Player|number}\n   *         a reference to the calling player when setting and the\n   *         current volume as a percent when getting\n   */\n\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      return this;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return this;\n    }\n    return this.techGet_('muted') || false;\n  };\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean|Player}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return this;\n    }\n    return !!this.isFullscreen_;\n  };\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      Events.on(_document2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(_document2['default'][fsApi.fullscreenElement]);\n\n        // If cancelling fullscreen, remove event listener.\n        if (this.isFullscreen() === false) {\n          Events.off(_document2['default'], fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('fullscreenchange');\n      }));\n\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n\n    return this;\n  };\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   *\n   * @return {Player}\n   *         A reference to the current player\n   */\n\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = _fullscreenApi2['default'];\n\n    this.isFullscreen(false);\n\n    // Check for browser element fullscreen support\n    if (fsApi.requestFullscreen) {\n      _document2['default'][fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n\n    return this;\n  };\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = _document2['default'].documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    Events.on(_document2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));\n\n    // Hide any scroll bars\n    _document2['default'].documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    Dom.addElClass(_document2['default'].body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('enterFullWindow');\n  };\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    Events.off(_document2['default'], 'keydown', this.fullWindowOnEscKey);\n\n    // Unhide scroll bars.\n    _document2['default'].documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    Dom.removeElClass(_document2['default'].body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('exitFullWindow');\n  };\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0;\n\n    // Loop through each playback technology in the options order\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = (0, _toTitleCase2['default'])(j[i]);\n      var tech = _tech2['default'].getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = _component2['default'].getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this4 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(_toTitleCase2['default']).map(function (techName) {\n      // `Component.getComponent(...)` is for support of old behavior of techs\n      // being registered as components.\n      // Remove once that deprecated behavior is removed.\n      return [techName, _tech2['default'].getTech(techName) || _component2['default'].getComponent(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      _log2['default'].error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n\n      return found;\n    };\n\n    var foundSourceAndTech = void 0;\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this4.options_[techName.toLowerCase()])) {\n        return { source: source, tech: techName };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  };\n\n  /**\n   * The source function updates the video source\n   * There are three types of variables you can pass as the argument.\n   * **URL string**: A URL to the the video file. Use this method if you are sure\n   * the current playback technology (HTML5/Flash) can support the source you\n   * provide. Currently only MP4 files can be used in both HTML5 and Flash.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]} [source]\n   *        One SourceObject or an array of SourceObjects\n   *\n   * @return {string|Player}\n   *         - The current video source when getting\n   *         - The player when setting\n   */\n\n\n  Player.prototype.src = function src(source) {\n    if (source === undefined) {\n      return this.techGet_('src');\n    }\n\n    var currentTech = _tech2['default'].getTech(this.techName_);\n\n    // Support old behavior of techs being registered as components.\n    // Remove once that deprecated behavior is removed.\n    if (!currentTech) {\n      currentTech = _component2['default'].getComponent(this.techName_);\n    }\n\n    // case: Array of source objects to choose from and pick the best to play\n    if (Array.isArray(source)) {\n      this.sourceList_(source);\n\n      // case: URL String (http://myvideo...)\n    } else if (typeof source === 'string') {\n      // create a source object from the string\n      this.src({ src: source });\n\n      // case: Source object { src: '', type: '' ... }\n    } else if (source instanceof Object) {\n      // check if the source has a type and the loaded tech cannot play the source\n      // if there's no type we'll just try the current tech\n      if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {\n        // create a source list with the current source and send through\n        // the tech loop to check for a compatible technology\n        this.sourceList_([source]);\n      } else {\n        this.cache_.sources = null;\n        this.cache_.source = source;\n        this.cache_.src = source.src;\n\n        this.currentType_ = source.type || '';\n\n        // wait until the tech is ready to set the source\n        this.ready(function () {\n\n          // The setSource tech method was added with source handlers\n          // so older techs won't support it\n          // We need to check the direct prototype for the case where subclasses\n          // of the tech do not support source handlers\n          if (currentTech.prototype.hasOwnProperty('setSource')) {\n            this.techCall_('setSource', source);\n          } else {\n            this.techCall_('src', source.src);\n          }\n\n          if (this.options_.preload === 'auto') {\n            this.load();\n          }\n\n          if (this.options_.autoplay) {\n            this.play();\n          }\n\n          // Set the source synchronously if possible (#2326)\n        }, true);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handle an array of source objects\n   *\n   * @param  {Tech~SourceObject[]} sources\n   *         Array of source objects\n   *\n   * @private\n   */\n\n\n  Player.prototype.sourceList_ = function sourceList_(sources) {\n    var sourceTech = this.selectSource(sources);\n\n    if (sourceTech) {\n      if (sourceTech.tech === this.techName_) {\n        // if this technology is already loaded, set the source\n        this.src(sourceTech.source);\n      } else {\n        // load this technology with the chosen source\n        this.loadTech_(sourceTech.tech, sourceTech.source);\n      }\n\n      this.cache_.sources = sources;\n    } else {\n      // We need to wrap this in a timeout to give folks a chance to add error event handlers\n      this.setTimeout(function () {\n        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n      }, 0);\n\n      // we could not find an appropriate tech, but let's still notify the delegate that this is it\n      // this needs a better comment about why this is needed\n      this.triggerReady();\n    }\n  };\n\n  /**\n   * Begin loading the src data.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n    return this;\n  };\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   *\n   * @return {Player}\n   *         A reference to the player\n   */\n\n\n  Player.prototype.reset = function reset() {\n    this.loadTech_((0, _toTitleCase2['default'])(this.options_.techOrder[0]), null);\n    this.techCall_('reset');\n    return this;\n  };\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  };\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n\n  Player.prototype.currentSource = function currentSource() {\n    var source = {};\n    var src = this.currentSrc();\n\n    if (src) {\n      source.src = src;\n    }\n\n    return this.cache_.source || source;\n  };\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.techGet_('currentSrc') || this.cache_.src || '';\n  };\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentType_ || '';\n  };\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false maens that we should not preload\n   *\n   * @return {string|Player}\n   *         - the preload attribute value when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return this;\n    }\n    return this.techGet_('preload');\n  };\n\n  /**\n   * Get or set the autoplay attribute.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should autoplay\n   *        - false maens that we should not autoplay\n   *\n   * @return {string|Player}\n   *         - the current value of autoplay\n   *         - the player when setting\n   */\n\n\n  Player.prototype.autoplay = function autoplay(value) {\n    if (value !== undefined) {\n      this.techCall_('setAutoplay', value);\n      this.options_.autoplay = value;\n      return this;\n    }\n    return this.techGet_('autoplay', value);\n  };\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  };\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string|Player}\n   *         - the current value of loop when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return this;\n    }\n    return this.techGet_('loop');\n  };\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string|Player}\n   *         - the current value of poster when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('posterchange');\n\n    return this;\n  };\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * soruce if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if (!this.poster_ && this.tech_ && this.tech_.poster) {\n      this.poster_ = this.tech_.poster() || '';\n\n      // Let components know the poster has changed\n      this.trigger('posterchange');\n    }\n  };\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of controls when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      // Don't trigger a change event unless it actually changed\n      if (this.controls_ !== bool) {\n        this.controls_ = bool;\n\n        if (this.usingNativeControls()) {\n          this.techCall_('setControls', bool);\n        }\n\n        if (bool) {\n          this.removeClass('vjs-controls-disabled');\n          this.addClass('vjs-controls-enabled');\n          /**\n           * @event Player#controlsenabled\n           * @type {EventTarget~Event}\n           */\n          this.trigger('controlsenabled');\n\n          if (!this.usingNativeControls()) {\n            this.addTechControlsListeners_();\n          }\n        } else {\n          this.removeClass('vjs-controls-enabled');\n          this.addClass('vjs-controls-disabled');\n          /**\n           * @event Player#controlsdisabled\n           * @type {EventTarget~Event}\n           */\n          this.trigger('controlsdisabled');\n\n          if (!this.usingNativeControls()) {\n            this.removeTechControlsListeners_();\n          }\n        }\n      }\n      return this;\n    }\n    return !!this.controls_;\n  };\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean|Player}\n   *         - the current value of native controls when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n\n      // Don't trigger a change event unless it actually changed\n      if (this.usingNativeControls_ !== bool) {\n        this.usingNativeControls_ = bool;\n        if (bool) {\n          this.addClass('vjs-using-native-controls');\n\n          /**\n           * player is using the native device controls\n           *\n           * @event Player#usingnativecontrols\n           * @type {EventTarget~Event}\n           */\n          this.trigger('usingnativecontrols');\n        } else {\n          this.removeClass('vjs-using-native-controls');\n\n          /**\n           * player is using the custom HTML controls\n           *\n           * @event Player#usingcustomcontrols\n           * @type {EventTarget~Event}\n           */\n          this.trigger('usingcustomcontrols');\n        }\n      }\n      return this;\n    }\n    return !!this.usingNativeControls_;\n  };\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null|Player}\n   *         - The current MediaError when getting (or null)\n   *         - The player when setting\n   */\n\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return this;\n    }\n\n    this.error_ = new _mediaError2['default'](err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // ie8 just logs \"[object object]\" if you just log the error object\n    _log2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaError2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n    this.trigger('error');\n\n    return this;\n  };\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   * @return {boolean|Player}\n   *         - the current value of userActive when getting\n   *         - the player when setting\n   */\n\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool !== undefined) {\n      bool = !!bool;\n      if (bool !== this.userActive_) {\n        this.userActive_ = bool;\n        if (bool) {\n          // If the user was inactive and is now active we want to reset the\n          // inactivity timer\n          this.userActivity_ = true;\n          this.removeClass('vjs-user-inactive');\n          this.addClass('vjs-user-active');\n          /**\n           * @event Player#useractive\n           * @type {EventTarget~Event}\n           */\n          this.trigger('useractive');\n        } else {\n          // We're switching the state to inactive manually, so erase any other\n          // activity\n          this.userActivity_ = false;\n\n          // Chrome/Safari/IE have bugs where when you change the cursor it can\n          // trigger a mousemove event. This causes an issue when you're hiding\n          // the cursor when the user is inactive, and a mousemove signals user\n          // activity. Making it impossible to go into inactive mode. Specifically\n          // this happens in fullscreen when we really need to hide the cursor.\n          //\n          // When this gets resolved in ALL browsers it can be removed\n          // https://code.google.com/p/chromium/issues/detail?id=103041\n          if (this.tech_) {\n            this.tech_.one('mousemove', function (e) {\n              e.stopPropagation();\n              e.preventDefault();\n            });\n          }\n\n          this.removeClass('vjs-user-active');\n          this.addClass('vjs-user-inactive');\n          /**\n           * @event Player#userinactive\n           * @type {EventTarget~Event}\n           */\n          this.trigger('userinactive');\n        }\n      }\n      return this;\n    }\n    return this.userActive_;\n  };\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = Fn.bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    var inactivityTimeout = void 0;\n\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (this.userActivity_) {\n        // Reset the activity tracker\n        this.userActivity_ = false;\n\n        // If the user state was inactive, set the state to active\n        this.userActive(true);\n\n        // Clear any existing inactivity timeout to start the timer over\n        this.clearTimeout(inactivityTimeout);\n\n        var timeout = this.options_.inactivityTimeout;\n\n        if (timeout > 0) {\n          // In <timeout> milliseconds, if no more activity has occurred the\n          // user will be considered inactive\n          inactivityTimeout = this.setTimeout(function () {\n            // Protect against the case where the inactivityTimeout can trigger just\n            // before the next user activity is picked up by the activity check loop\n            // causing a flicker\n            if (!this.userActivity_) {\n              this.userActive(false);\n            }\n          }, timeout);\n        }\n      }\n    }, 250);\n  };\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The current playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      this.techCall_('setPlaybackRate', rate);\n      return this;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('playbackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {Player|boolean}\n   *         - the current value of isAudio when getting\n   *         - the player if setting\n   */\n\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return this;\n    }\n\n    return !!this.isAudio_;\n  };\n\n  /**\n   * Get the {@link VideoTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n   *\n   * @return {VideoTrackList}\n   *         the current video track list\n   */\n\n\n  Player.prototype.videoTracks = function videoTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.videoTracks_ = this.videoTracks_ || new _videoTrackList2['default']();\n      return this.videoTracks_;\n    }\n\n    return this.tech_.videoTracks();\n  };\n\n  /**\n   * Get the {@link AudioTrackList}\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n   *\n   * @return {AudioTrackList}\n   *         the current audio track list\n   */\n\n\n  Player.prototype.audioTracks = function audioTracks() {\n    // if we have not yet loadTech_, we create videoTracks_\n    // these will be passed to the tech during loading\n    if (!this.tech_) {\n      this.audioTracks_ = this.audioTracks_ || new _audioTrackList2['default']();\n      return this.audioTracks_;\n    }\n\n    return this.tech_.audioTracks();\n  };\n\n  /**\n   * Get the {@link TextTrackList}\n   *\n   * Text tracks are tracks of timed text events.\n   * - Captions: text displayed over the video\n   *             for the hearing impaired\n   * - Subtitles: text displayed over the video for\n   *              those who don't understand language in the video\n   * - Chapters: text displayed in a menu allowing the user to jump\n   *             to particular points (chapters) in the video\n   * - Descriptions: (not yet implemented) audio descriptions that are read back to\n   *                 the user by a screen reading device\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n   *\n   * @return {TextTrackList|undefined}\n   *         The current TextTrackList or undefined if\n   *         or undefined if we don't have a tech\n   */\n\n\n  Player.prototype.textTracks = function textTracks() {\n    // cannot use techGet_ directly because it checks to see whether the tech is ready.\n    // Flash is unlikely to be ready in time but textTracks should still work.\n    if (this.tech_) {\n      return this.tech_.textTracks();\n    }\n  };\n\n  /**\n   * Get the \"remote\" {@link TextTrackList}. Remote Text Tracks\n   * are tracks that were added to the HTML video element and can\n   * be removed, whereas normal texttracks cannot be removed.\n   *\n   *\n   * @return {TextTrackList|undefined}\n   *         The current remote text track list or undefined\n   *         if we don't have a tech\n   */\n\n\n  Player.prototype.remoteTextTracks = function remoteTextTracks() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTracks();\n    }\n  };\n\n  /**\n   * Get the \"remote\" {@link HTMLTrackElementList}.\n   * This gives the user all of the DOM elements that match up\n   * with the remote {@link TextTrackList}.\n   *\n   * @return {HTMLTrackElementList}\n   *         The current remote text track list elements\n   *         or undefined if we don't have a tech\n   */\n\n\n  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {\n    if (this.tech_) {\n      return this.tech_.remoteTextTrackEls();\n    }\n  };\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HTMLTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HTMLTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HTMLTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$track = _ref3.track,\n        track = _ref3$track === undefined ? arguments[0] : _ref3$track;\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  };\n\n  // Methods to add support for\n  // initialTime: function() { return this.techCall_('initialTime'); },\n  // startOffsetTime: function() { return this.techCall_('startOffsetTime'); },\n  // played: function() { return this.techCall_('played'); },\n  // defaultPlaybackRate: function() { return this.techCall_('defaultPlaybackRate'); },\n  // defaultMuted: function() { return this.techCall_('defaultMuted'); }\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the lanugage\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string|Player}\n   *         - The current language code when getting\n   *         - A reference to the player when setting\n   */\n\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n    return this;\n  };\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n\n  Player.prototype.languages = function languages() {\n    return (0, _mergeOptions2['default'])(Player.prototype.options_.languages, this.languages_);\n  };\n\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = (0, _mergeOptions2['default'])(this.options_);\n    var tracks = options.tracks;\n\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = (0, _mergeOptions2['default'])(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  };\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this5 = this;\n\n    options = options || {};\n    options.content = content || '';\n\n    var modal = new _modalDialog2['default'](this, options);\n\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this5.removeChild(modal);\n    });\n\n    return modal.open();\n  };\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n\n    var tagOptions = Dom.getElAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (Dom.hasElClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = (0, _tuple2['default'])(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        _log2['default'].error(err);\n      }\n      (0, _obj.assign)(tagOptions, data);\n    }\n\n    (0, _obj.assign)(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(Dom.getElAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(Dom.getElAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  };\n\n  /**\n   * Determine wether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = _document2['default'].createElement('i');\n\n    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||\n    // IE10-specific (2012 flex spec)\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(_component2['default']);\n\n/**\n * Global player list\n *\n * @type {Object}\n */\n\n\nPlayer.players = {};\n\nvar navigator = _window2['default'].navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: ['html5', 'flash'],\n  // techOrder: ['flash','html5'],\n\n  html5: {},\n  flash: {},\n\n  // defaultVolume: 0.85,\n  defaultVolume: 0.00,\n\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],\n\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n\n  // locales and their language translations\n  languages: {},\n\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\n\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + (0, _toTitleCase2['default'])(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n_component2['default'].registerComponent('Player', Player);\nexports['default'] = Player;\n"]},"metadata":{},"sourceType":"script"}