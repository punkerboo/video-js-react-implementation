{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * @file flash-rtmp.js\n * @module flash-rtmp\n */\n\n/**\n * Add RTMP properties to the {@link Flash} Tech.\n *\n * @param {Flash} Flash\n *        The flash tech class.\n *\n * @mixin FlashRtmpDecorator\n */\n\nfunction FlashRtmpDecorator(Flash) {\n  Flash.streamingFormats = {\n    'rtmp/mp4': 'MP4',\n    'rtmp/flv': 'FLV'\n  };\n  /**\n   * Join connection and stream with an ampersand.\n   *\n   * @param {string} connection\n   *        The connection string.\n   *\n   * @param {string} stream\n   *        The stream string.\n   */\n\n  Flash.streamFromParts = function (connection, stream) {\n    return connection + '&' + stream;\n  };\n  /**\n   * The flash parts object that contains connection and stream info.\n   *\n   * @typedef {Object} Flash~PartsObject\n   *\n   * @property {string} connection\n   *           The connection string of a source, defaults to an empty string.\n   *\n   * @property {string} stream\n   *           The stream string of the source, defaults to an empty string.\n   */\n\n  /**\n   * Convert a source url into a stream and connection parts.\n   *\n   * @param {string} src\n   *        the source url\n   *\n   * @return {Flash~PartsObject}\n   *         The parts object that contains a connection and a stream\n   */\n\n\n  Flash.streamToParts = function (src) {\n    var parts = {\n      connection: '',\n      stream: ''\n    };\n\n    if (!src) {\n      return parts;\n    } // Look for the normal URL separator we expect, '&'.\n    // If found, we split the URL into two pieces around the\n    // first '&'.\n\n\n    var connEnd = src.search(/&(?!\\w+=)/);\n    var streamBegin = void 0;\n\n    if (connEnd !== -1) {\n      streamBegin = connEnd + 1;\n    } else {\n      // If there's not a '&', we use the last '/' as the delimiter.\n      connEnd = streamBegin = src.lastIndexOf('/') + 1;\n\n      if (connEnd === 0) {\n        // really, there's not a '/'?\n        connEnd = streamBegin = src.length;\n      }\n    }\n\n    parts.connection = src.substring(0, connEnd);\n    parts.stream = src.substring(streamBegin, src.length);\n    return parts;\n  };\n  /**\n   * Check if the source type is a streaming type.\n   *\n   * @param {string} srcType\n   *        The mime type to check.\n   *\n   * @return {boolean}\n   *          - True if the source type is a streaming type.\n   *          - False if the source type is not a streaming type.\n   */\n\n\n  Flash.isStreamingType = function (srcType) {\n    return srcType in Flash.streamingFormats;\n  }; // RTMP has four variations, any string starting\n  // with one of these protocols should be valid\n\n  /**\n   * Regular expression used to check if the source is an rtmp source.\n   *\n   * @property {RegExp} Flash.RTMP_RE\n   */\n\n\n  Flash.RTMP_RE = /^rtmp[set]?:\\/\\//i;\n  /**\n   * Check if the source itself is a streaming type.\n   *\n   * @param {string} src\n   *        The url to the source.\n   *\n   * @return {boolean}\n   *          - True if the source url indicates that the source is streaming.\n   *          - False if the shource url indicates that the source url is not streaming.\n   */\n\n  Flash.isStreamingSrc = function (src) {\n    return Flash.RTMP_RE.test(src);\n  };\n  /**\n   * A source handler for RTMP urls\n   * @type {Object}\n   */\n\n\n  Flash.rtmpSourceHandler = {};\n  /**\n   * Check if Flash can play the given mime type.\n   *\n   * @param {string} type\n   *        The mime type to check\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n\n  Flash.rtmpSourceHandler.canPlayType = function (type) {\n    if (Flash.isStreamingType(type)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n  /**\n   * Check if Flash can handle the source natively\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Object} [options]\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n\n\n  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {\n    var can = Flash.rtmpSourceHandler.canPlayType(source.type);\n\n    if (can) {\n      return can;\n    }\n\n    if (Flash.isStreamingSrc(source.src)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n  /**\n   * Pass the source to the flash object.\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Flash} tech\n   *        The instance of the Flash tech\n   *\n   * @param {Object} [options]\n   *        The options to pass to the source\n   */\n\n\n  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {\n    var srcParts = Flash.streamToParts(source.src);\n    tech.setRtmpConnection(srcParts.connection);\n    tech.setRtmpStream(srcParts.stream);\n  }; // Register the native source handler\n\n\n  Flash.registerSourceHandler(Flash.rtmpSourceHandler);\n  return Flash;\n}\n\nexports['default'] = FlashRtmpDecorator;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/tech/flash-rtmp.js"],"names":["exports","__esModule","FlashRtmpDecorator","Flash","streamingFormats","streamFromParts","connection","stream","streamToParts","src","parts","connEnd","search","streamBegin","lastIndexOf","length","substring","isStreamingType","srcType","RTMP_RE","isStreamingSrc","test","rtmpSourceHandler","canPlayType","type","canHandleSource","source","options","can","handleSource","tech","srcParts","setRtmpConnection","setRtmpStream","registerSourceHandler"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n/**\n * @file flash-rtmp.js\n * @module flash-rtmp\n */\n\n/**\n * Add RTMP properties to the {@link Flash} Tech.\n *\n * @param {Flash} Flash\n *        The flash tech class.\n *\n * @mixin FlashRtmpDecorator\n */\nfunction FlashRtmpDecorator(Flash) {\n  Flash.streamingFormats = {\n    'rtmp/mp4': 'MP4',\n    'rtmp/flv': 'FLV'\n  };\n\n  /**\n   * Join connection and stream with an ampersand.\n   *\n   * @param {string} connection\n   *        The connection string.\n   *\n   * @param {string} stream\n   *        The stream string.\n   */\n  Flash.streamFromParts = function (connection, stream) {\n    return connection + '&' + stream;\n  };\n\n  /**\n   * The flash parts object that contains connection and stream info.\n   *\n   * @typedef {Object} Flash~PartsObject\n   *\n   * @property {string} connection\n   *           The connection string of a source, defaults to an empty string.\n   *\n   * @property {string} stream\n   *           The stream string of the source, defaults to an empty string.\n   */\n\n  /**\n   * Convert a source url into a stream and connection parts.\n   *\n   * @param {string} src\n   *        the source url\n   *\n   * @return {Flash~PartsObject}\n   *         The parts object that contains a connection and a stream\n   */\n  Flash.streamToParts = function (src) {\n    var parts = {\n      connection: '',\n      stream: ''\n    };\n\n    if (!src) {\n      return parts;\n    }\n\n    // Look for the normal URL separator we expect, '&'.\n    // If found, we split the URL into two pieces around the\n    // first '&'.\n    var connEnd = src.search(/&(?!\\w+=)/);\n    var streamBegin = void 0;\n\n    if (connEnd !== -1) {\n      streamBegin = connEnd + 1;\n    } else {\n      // If there's not a '&', we use the last '/' as the delimiter.\n      connEnd = streamBegin = src.lastIndexOf('/') + 1;\n      if (connEnd === 0) {\n        // really, there's not a '/'?\n        connEnd = streamBegin = src.length;\n      }\n    }\n\n    parts.connection = src.substring(0, connEnd);\n    parts.stream = src.substring(streamBegin, src.length);\n\n    return parts;\n  };\n\n  /**\n   * Check if the source type is a streaming type.\n   *\n   * @param {string} srcType\n   *        The mime type to check.\n   *\n   * @return {boolean}\n   *          - True if the source type is a streaming type.\n   *          - False if the source type is not a streaming type.\n   */\n  Flash.isStreamingType = function (srcType) {\n    return srcType in Flash.streamingFormats;\n  };\n\n  // RTMP has four variations, any string starting\n  // with one of these protocols should be valid\n\n  /**\n   * Regular expression used to check if the source is an rtmp source.\n   *\n   * @property {RegExp} Flash.RTMP_RE\n   */\n  Flash.RTMP_RE = /^rtmp[set]?:\\/\\//i;\n\n  /**\n   * Check if the source itself is a streaming type.\n   *\n   * @param {string} src\n   *        The url to the source.\n   *\n   * @return {boolean}\n   *          - True if the source url indicates that the source is streaming.\n   *          - False if the shource url indicates that the source url is not streaming.\n   */\n  Flash.isStreamingSrc = function (src) {\n    return Flash.RTMP_RE.test(src);\n  };\n\n  /**\n   * A source handler for RTMP urls\n   * @type {Object}\n   */\n  Flash.rtmpSourceHandler = {};\n\n  /**\n   * Check if Flash can play the given mime type.\n   *\n   * @param {string} type\n   *        The mime type to check\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canPlayType = function (type) {\n    if (Flash.isStreamingType(type)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Check if Flash can handle the source natively\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Object} [options]\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'maybe', or '' (empty string)\n   */\n  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {\n    var can = Flash.rtmpSourceHandler.canPlayType(source.type);\n\n    if (can) {\n      return can;\n    }\n\n    if (Flash.isStreamingSrc(source.src)) {\n      return 'maybe';\n    }\n\n    return '';\n  };\n\n  /**\n   * Pass the source to the flash object.\n   *\n   * @param {Object} source\n   *        The source object\n   *\n   * @param {Flash} tech\n   *        The instance of the Flash tech\n   *\n   * @param {Object} [options]\n   *        The options to pass to the source\n   */\n  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {\n    var srcParts = Flash.streamToParts(source.src);\n\n    tech.setRtmpConnection(srcParts.connection);\n    tech.setRtmpStream(srcParts.stream);\n  };\n\n  // Register the native source handler\n  Flash.registerSourceHandler(Flash.rtmpSourceHandler);\n\n  return Flash;\n}\n\nexports['default'] = FlashRtmpDecorator;\n"]},"metadata":{},"sourceType":"script"}