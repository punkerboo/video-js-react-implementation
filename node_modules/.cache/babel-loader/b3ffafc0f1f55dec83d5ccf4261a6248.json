{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\nvar _tech = require('./tech.js');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _component = require('../component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _dom = require('../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _url = require('../utils/url.js');\n\nvar Url = _interopRequireWildcard(_url);\n\nvar _fn = require('../utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _log = require('../utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _tsml = require('tsml');\n\nvar _tsml2 = _interopRequireDefault(_tsml);\n\nvar _browser = require('../utils/browser.js');\n\nvar browser = _interopRequireWildcard(_browser);\n\nvar _document = require('global/document');\n\nvar _document2 = _interopRequireDefault(_document);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _obj = require('../utils/obj');\n\nvar _mergeOptions = require('../utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nvar _toTitleCase = require('../utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file html5.js\n */\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\n\n\nvar Html5 = function (_Tech) {\n  _inherits(Html5, _Tech);\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n\n\n  function Html5(options, ready) {\n    _classCallCheck(this, Html5);\n\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    var source = options.source;\n    var crossoriginTracks = false; // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n\n    if (_this.el_.hasChildNodes()) {\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n\n            _this.remoteTextTracks().addTrack_(node.track);\n\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    } // TODO: add text tracks into this list\n\n\n    var trackTypes = ['audio', 'video']; // ProxyNative Video/Audio Track\n\n    trackTypes.forEach(function (type) {\n      var elTracks = _this.el()[type + 'Tracks'];\n\n      var techTracks = _this[type + 'Tracks']();\n\n      var capitalType = (0, _toTitleCase2['default'])(type);\n\n      if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n        return;\n      }\n\n      _this['handle' + capitalType + 'TrackChange_'] = function (e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      };\n\n      _this['handle' + capitalType + 'TrackAdd_'] = function (e) {\n        return techTracks.addTrack(e.track);\n      };\n\n      _this['handle' + capitalType + 'TrackRemove_'] = function (e) {\n        return techTracks.removeTrack(e.track);\n      };\n\n      elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);\n      elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);\n      elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);\n\n      _this['removeOld' + capitalType + 'Tracks_'] = function (e) {\n        return _this.removeOldTracks_(techTracks, elTracks);\n      }; // Remove (native) tracks that are not used anymore\n\n\n      _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);\n    });\n\n    if (_this.featuresNativeTextTracks) {\n      if (crossoriginTracks) {\n        _log2['default'].warn((0, _tsml2['default'])(_templateObject));\n      }\n\n      _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);\n      _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);\n      _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);\n\n      _this.proxyNativeTextTracks_();\n    } // prevent iOS Safari from disabling metadata text tracks during native playback\n\n\n    _this.restoreMetadataTracksInIOSNativePlayer_(); // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n\n\n    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    } // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n\n\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n\n    return _this;\n  }\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  Html5.prototype.dispose = function dispose() {\n    var _this2 = this; // Un-ProxyNativeTracks\n\n\n    ['audio', 'video', 'text'].forEach(function (type) {\n      var capitalType = (0, _toTitleCase2['default'])(type);\n      var tl = _this2.el_[type + 'Tracks'];\n\n      if (tl && tl.removeEventListener) {\n        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);\n        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);\n        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);\n      } // Stop removing old text tracks\n\n\n      if (tl) {\n        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);\n      }\n    });\n    Html5.disposeMediaElement(this.el_); // tech will handle clearing of the emulated track list\n\n    _Tech.prototype.dispose.call(this);\n  };\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0; // captures a snapshot of every metadata track's current state\n\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    }; // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n\n\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      } // we only want this handler to be executed on the first 'change' event\n\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n    }; // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n\n\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot); // remove the listener before adding it just in case it wasn't previously removed\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    }); // start updating the snapshot again after leaving fullscreen\n\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot); // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Html5.prototype.createEl = function createEl() {\n    var el = this.options_.tag; // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = _document2['default'].createElement('video'); // determine if native controls should be used\n\n        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);\n        var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);\n\n        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        Dom.setElAttributes(el, (0, _obj.assign)(attributes, {\n          id: this.options_.techId,\n          'class': 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      Dom.setAttribute(el, 'preload', this.options_.preload);\n    } // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n\n\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = settingsAttrs.length - 1; i >= 0; i--) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          Dom.setAttribute(el, attr, attr);\n        } else {\n          Dom.removeAttribute(el, attr);\n        }\n\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  };\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n      return;\n    } // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n\n\n    var eventsToTrigger = ['loadstart']; // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n\n    eventsToTrigger.push('loadedmetadata'); // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    } // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n\n\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    } // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n\n\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    } // We still need to give the player time to add event listeners\n\n\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n  /**\n   * Add event listeners to native text track events. This adds the native text tracks\n   * to our emulated {@link TextTrackList}.\n   */\n\n\n  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {\n    var tt = this.el().textTracks;\n\n    if (tt) {\n      // Add tracks - if player is initialised after DOM loaded, textTracks\n      // will not trigger addtrack\n      for (var i = 0; i < tt.length; i++) {\n        this.textTracks().addTrack_(tt[i]);\n      }\n\n      if (tt.addEventListener) {\n        tt.addEventListener('change', this.handleTextTrackChange_);\n        tt.addEventListener('addtrack', this.handleTextTrackAdd_);\n        tt.addEventListener('removetrack', this.handleTextTrackRemove_);\n      } // Remove (native) texttracks that are not used anymore\n\n\n      this.on('loadstart', this.removeOldTextTracks_);\n    }\n  };\n  /**\n   * Handle any {@link TextTrackList} `change` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `change` event that caused this to run.\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {\n    var tt = this.textTracks();\n    this.textTracks().trigger({\n      type: 'change',\n      target: tt,\n      currentTarget: tt,\n      srcElement: tt\n    });\n  };\n  /**\n   * Handle any {@link TextTrackList} `addtrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `addtrack` event that caused this to run.\n   *\n   * @listens TextTrackList#addtrack\n   */\n\n\n  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {\n    this.textTracks().addTrack_(e.track);\n  };\n  /**\n   * Handle any {@link TextTrackList} `removetrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `removetrack` event that caused this to run.\n   *\n   * @listens TextTrackList#removetrack\n   */\n\n\n  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {\n    this.textTracks().removeTrack_(e.track);\n  };\n  /**\n   * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or\n   * {@link TextTrack}s that are not in the media elements TrackList.\n   *\n   * @param {TrackList} techTracks\n   *        HTML5 Tech's TrackList to search through\n   *\n   * @param {TrackList} elTracks\n   *        HTML5 media elements TrackList to search trough.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {\n    // This will loop over the techTracks and check if they are still used by the HTML5 media element\n    // If not, they will be removed from the emulated list\n    var removeTracks = [];\n\n    if (!elTracks) {\n      return;\n    }\n\n    for (var i = 0; i < techTracks.length; i++) {\n      var techTrack = techTracks[i];\n      var found = false;\n\n      for (var j = 0; j < elTracks.length; j++) {\n        if (elTracks[j] === techTrack) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        removeTracks.push(techTrack);\n      }\n    }\n\n    for (var _i = 0; _i < removeTracks.length; _i++) {\n      var track = removeTracks[_i];\n      techTracks.removeTrack_(track);\n    }\n  };\n  /**\n   * Remove {@link TextTrack}s that dont exist in the native track list from our\n   * emulated {@link TextTrackList}.\n   *\n   * @listens Tech#loadstart\n   */\n\n\n  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {\n    var techTracks = this.textTracks();\n    var elTracks = this.el().textTracks;\n    this.removeOldTracks_(techTracks, elTracks);\n  };\n  /**\n   * Called by {@link Player#play} to play using the `Html5` `Tech`.\n   */\n\n\n  Html5.prototype.play = function play() {\n    var playPromise = this.el_.play(); // Catch/silence error when a pause interrupts a play request\n    // on browsers which return a promise\n\n    if (playPromise !== undefined && typeof playPromise.then === 'function') {\n      playPromise.then(null, function (e) {});\n    }\n  };\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      (0, _log2['default'])(e, 'Video is not ready. (Video.js)'); // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n\n  Html5.prototype.duration = function duration() {\n    var _this3 = this; // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n\n\n    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {\n      if (this.el_.currentTime === 0) {\n        // Wait for the first `timeupdate` with currentTime > 0 - there may be\n        // several with 0\n        var checkProgress = function checkProgress() {\n          if (_this3.el_.currentTime > 0) {\n            // Trigger durationchange for genuinely live video\n            if (_this3.el_.duration === Infinity) {\n              _this3.trigger('durationchange');\n            }\n\n            _this3.off('timeupdate', checkProgress);\n          }\n        };\n\n        this.on('timeupdate', checkProgress);\n        return NaN;\n      }\n    }\n\n    return this.el_.duration || NaN;\n  };\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The heigth of the HTML5 media element.\n   */\n\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this4 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', {\n        isFullscreen: false\n      });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n        this.trigger('fullscreenchange', {\n          isFullscreen: true\n        });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this4.off('webkitbeginfullscreen', beginFn);\n\n      _this4.off('webkitendfullscreen', endFn);\n    });\n  };\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || ''; // Seems to be broken in Chromium/Chrome && Safari in Leopard\n\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play(); // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    } // Setting src through `src` instead of `setSrc` will be deprecated\n\n\n    this.setSrc(_src);\n  };\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n\n    return this.el_.currentSrc;\n  };\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  };\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to intialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n\n    var htmlTrackElement = _document2['default'].createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n\n    if (options['default']) {\n      htmlTrackElement['default'] = options['default'];\n    }\n\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  };\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  };\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(_tech2['default']);\n/* HTML5 Support Testing ---------------------------------------------------- */\n\n\nif (Dom.isReal()) {\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = _document2['default'].createElement('video');\n\n  var track = _document2['default'].createElement('track');\n\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\n\n\nHtml5.isSupported = function () {\n  // IE9 with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\n\n\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\n\n\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (browser.IS_ANDROID && browser.IS_CHROME && browser.CHROME_VERSION < 58) {\n    return false;\n  } // IE will error if Windows Media Player not installed #3315\n\n\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\n\n\nHtml5.supportsNativeTextTracks = function () {\n  return browser.IS_ANY_SAFARI;\n};\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\n\n\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\n\n\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\n\n\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\n\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\n\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.movingMediaElementInDOM = !browser.IS_IOS; // TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresFullscreenResize = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggred instead.\n *\n * @type {boolean}\n * @default\n */\n\nHtml5.prototype.featuresProgressEvents = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggred instead.\n *\n * @default\n */\n\nHtml5.prototype.featuresTimeupdateEvents = true;\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\n\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\n\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\n\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks(); // HTML5 Feature detection and Device Fixes --------------------------------- //\n\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\nvar mp4RE = /^video\\/mp4/i;\n\nHtml5.patchCanPlayType = function () {\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n\n      return canPlayType.call(this, type);\n    }; // Override Android 2.2 and less canPlayType method which is broken\n\n  } else if (browser.IS_OLD_ANDROID) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mp4RE.test(type)) {\n        return 'maybe';\n      }\n\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n}; // by default, patch the media element\n\n\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  } // remove any child track or source nodes to prevent their loading\n\n\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  } // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n\n\n  el.removeAttribute('src'); // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {// not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  } // remove any src reference.\n  // not setting `src=''` because that throws an error\n\n\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {// satisfy linter\n      }\n    })();\n  }\n};\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n\n\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n}); // Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n}); // Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occured during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - Flase indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n/**\n * Get the value of `videoHeight` from the video element. `videoHeigth` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n}); // Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n}); // wrap native functions with a function\n// The list is as follows:\n// pause, load play\n\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n\n_tech2['default'].withSourceHandlers(Html5);\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @proprety {Tech~SourceObject} source\n *        The source object\n *\n * @proprety {Html5} tech\n *        The instance of the HTML5 tech.\n */\n\n\nHtml5.nativeSourceHandler = {};\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\n\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE9 on Windows 7 without MediaPlayer throws an error here\n  // https://github.com/videojs/video.js/issues/519\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\n\n\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type); // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = Url.getFileExtension(source.src);\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n\n  return '';\n};\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\n\n\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\n\n\nHtml5.nativeSourceHandler.dispose = function () {}; // Register the native source handler\n\n\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n\n_component2['default'].registerComponent('Html5', Html5);\n\n_tech2['default'].registerTech('Html5', Html5);\n\nexports['default'] = Html5;","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/tech/html5.js"],"names":["exports","__esModule","_templateObject","_taggedTemplateLiteralLoose","_tech","require","_tech2","_interopRequireDefault","_component","_component2","_dom","Dom","_interopRequireWildcard","_url","Url","_fn","Fn","_log","_log2","_tsml","_tsml2","_browser","browser","_document","_document2","_window","_window2","_obj","_mergeOptions","_mergeOptions2","_toTitleCase","_toTitleCase2","obj","newObj","key","Object","prototype","hasOwnProperty","call","strings","raw","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","Html5","_Tech","options","ready","_this","source","crossoriginTracks","el_","currentSrc","src","tag","initNetworkState_","setSource","handleLateInit_","hasChildNodes","nodes","childNodes","nodesLength","length","removeNodes","node","nodeName","toLowerCase","featuresNativeTextTracks","push","remoteTextTrackEls","addTrackElement_","remoteTextTracks","addTrack_","track","hasAttribute","isCrossOrigin","i","removeChild","trackTypes","forEach","type","elTracks","el","techTracks","capitalType","addEventListener","e","trigger","target","currentTarget","srcElement","addTrack","removeTrack","removeOldTracks_","on","warn","handleTextTrackChange_","bind","handleTextTrackChange","handleTextTrackAdd_","handleTextTrackAdd","handleTextTrackRemove_","handleTextTrackRemove","proxyNativeTextTracks_","restoreMetadataTracksInIOSNativePlayer_","TOUCH_ENABLED","IS_IPHONE","IS_NATIVE_ANDROID","nativeControlsForTouch","setControls","proxyWebkitFullscreen_","triggerReady","dispose","_this2","tl","removeEventListener","off","disposeMediaElement","textTracks","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","kind","storedMode","mode","restoreTrackMode","storedTrack","createEl","options_","playerElIngest","movingMediaElementInDOM","clone","cloneNode","parentNode","insertBefore","createElement","tagAttributes","getElAttributes","attributes","controls","setElAttributes","assign","id","techId","playerId","preload","setAttribute","settingsAttrs","attr","removeAttribute","networkState","readyState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","tt","removeOldTextTracks_","removeTrack_","removeTracks","techTrack","found","j","_i","play","playPromise","undefined","then","setCurrentTime","seconds","currentTime","duration","_this3","Infinity","IS_ANDROID","IS_CHROME","checkProgress","NaN","width","offsetWidth","height","offsetHeight","_this4","endFn","isFullscreen","beginFn","webkitPresentationMode","one","supportsFullScreen","webkitEnterFullScreen","userAgent","navigator","test","enterFullScreen","video","paused","HAVE_METADATA","setTimeout","pause","exitFullScreen","webkitExitFullScreen","_src","setSrc","reset","resetMediaElement","currentSource_","val","addTextTrack","label","language","createRemoteTextTrack","htmlTrackElement","srclang","addRemoteTextTrack","manualCleanup","appendChild","removeRemoteTextTrack","tracks","$$","getVideoPlaybackQuality","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","performance","now","creationTime","timing","navigationStart","Date","isReal","TEST_VID","isSupported","volume","canPlayType","canControlVolume","canControlPlaybackRate","CHROME_VERSION","playbackRate","supportsNativeTextTracks","IS_ANY_SAFARI","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","audioTracks","Events","featuresVolumeControl","featuresPlaybackRate","IS_IOS","featuresFullscreenResize","featuresProgressEvents","featuresTimeupdateEvents","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","mp4RE","patchCanPlayType","ANDROID_VERSION","IS_FIREFOX","IS_OLD_ANDROID","unpatchCanPlayType","r","firstChild","load","sources","querySelectorAll","prop","v","withSourceHandlers","nativeSourceHandler","canHandleSource","ext","getFileExtension","handleSource","tech","registerSourceHandler","registerComponent","registerTech"],"mappings":"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;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UA3CA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAzDA;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MA1EA;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAzFA,EAyFeP,OAzFf,CAyFuB,UAAU2L,IAAV,EAAgB;AACrC9N,EAAAA,KAAK,CAACvB,SAAN,CAAgBqP,IAAhB,IAAwB,YAAY;AAClC,WAAO,KAAKvN,GAAL,CAASuN,IAAT,KAAkB,KAAKvN,GAAL,CAASuB,YAAT,CAAsBgM,IAAtB,CAAzB;AACD,GAFD;AAGD,CA7FD,E,CA+FA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAtCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAtDA;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aApEA,EAoEe3L,OApEf,CAoEuB,UAAU2L,IAAV,EAAgB;AACrC9N,EAAAA,KAAK,CAACvB,SAAN,CAAgB,QAAQ,CAAC,GAAGL,aAAa,CAAC,SAAD,CAAjB,EAA8B0P,IAA9B,CAAxB,IAA+D,UAAUC,CAAV,EAAa;AAC1E,SAAKxN,GAAL,CAASuN,IAAT,IAAiBC,CAAjB;;AAEA,QAAIA,CAAJ,EAAO;AACL,WAAKxN,GAAL,CAAS8F,YAAT,CAAsByH,IAAtB,EAA4BA,IAA5B;AACD,KAFD,MAEO;AACL,WAAKvN,GAAL,CAASiG,eAAT,CAAyBsH,IAAzB;AACD;AACF,GARD;AASD,CA9ED,E,CAgFA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UApCA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAjDA;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QA9DA;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAjFA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA/FA;AAiGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA7GA;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UA1HA;AA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAxIA;AA0IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAvJA;AAyJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QApKA;AAsKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cArLA;AAuLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAxMA;AA0MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YArNA;AAuNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAlOA,EAkOe3L,OAlOf,CAkOuB,UAAU2L,IAAV,EAAgB;AACrC9N,EAAAA,KAAK,CAACvB,SAAN,CAAgBqP,IAAhB,IAAwB,YAAY;AAClC,WAAO,KAAKvN,GAAL,CAASuN,IAAT,CAAP;AACD,GAFD;AAGD,CAtOD,E,CAwOA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QArCA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAxDA;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAvEA,EAuEgB3L,OAvEhB,CAuEwB,UAAU2L,IAAV,EAAgB;AACtC9N,EAAAA,KAAK,CAACvB,SAAN,CAAgB,QAAQ,CAAC,GAAGL,aAAa,CAAC,SAAD,CAAjB,EAA8B0P,IAA9B,CAAxB,IAA+D,UAAUC,CAAV,EAAa;AAC1E,SAAKxN,GAAL,CAASuN,IAAT,IAAiBC,CAAjB;AACD,GAFD;AAGD,CA3ED,E,CA6EA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAjBA,EAiBQ5L,OAjBR,CAiBgB,UAAU2L,IAAV,EAAgB;AAC9B9N,EAAAA,KAAK,CAACvB,SAAN,CAAgBqP,IAAhB,IAAwB,YAAY;AAClC,WAAO,KAAKvN,GAAL,CAASuN,IAAT,GAAP;AACD,GAFD;AAGD,CArBD;;AAuBAnR,MAAM,CAAC,SAAD,CAAN,CAAkBqR,kBAAlB,CAAqChO,KAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,KAAK,CAACiO,mBAAN,GAA4B,EAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjO,KAAK,CAACiO,mBAAN,CAA0BnC,WAA1B,GAAwC,UAAU1J,IAAV,EAAgB;AACtD;AACA;AACA,MAAI;AACF,WAAOpC,KAAK,CAAC2L,QAAN,CAAeG,WAAf,CAA2B1J,IAA3B,CAAP;AACD,GAFD,CAEE,OAAOM,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1C,KAAK,CAACiO,mBAAN,CAA0BC,eAA1B,GAA4C,UAAU7N,MAAV,EAAkBH,OAAlB,EAA2B;AAErE;AACA,MAAIG,MAAM,CAAC+B,IAAX,EAAiB;AACf,WAAOpC,KAAK,CAACiO,mBAAN,CAA0BnC,WAA1B,CAAsCzL,MAAM,CAAC+B,IAA7C,CAAP,CADe,CAGf;AACD,GAJD,MAIO,IAAI/B,MAAM,CAACI,GAAX,EAAgB;AACrB,QAAI0N,GAAG,GAAGhR,GAAG,CAACiR,gBAAJ,CAAqB/N,MAAM,CAACI,GAA5B,CAAV;AAEA,WAAOT,KAAK,CAACiO,mBAAN,CAA0BnC,WAA1B,CAAsC,WAAWqC,GAAjD,CAAP;AACD;;AAED,SAAO,EAAP;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnO,KAAK,CAACiO,mBAAN,CAA0BI,YAA1B,GAAyC,UAAUhO,MAAV,EAAkBiO,IAAlB,EAAwBpO,OAAxB,EAAiC;AACxEoO,EAAAA,IAAI,CAACzE,MAAL,CAAYxJ,MAAM,CAACI,GAAnB;AACD,CAFD;AAIA;AACA;AACA;;;AACAT,KAAK,CAACiO,mBAAN,CAA0B7J,OAA1B,GAAoC,YAAY,CAAE,CAAlD,C,CAEA;;;AACApE,KAAK,CAACuO,qBAAN,CAA4BvO,KAAK,CAACiO,mBAAlC;;AAEAnR,WAAW,CAAC,SAAD,CAAX,CAAuB0R,iBAAvB,CAAyC,OAAzC,EAAkDxO,KAAlD;;AACArD,MAAM,CAAC,SAAD,CAAN,CAAkB8R,YAAlB,CAA+B,OAA/B,EAAwCzO,KAAxC;;AACA3D,OAAO,CAAC,SAAD,CAAP,GAAqB2D,KAArB","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\nvar _tech = require('./tech.js');\n\nvar _tech2 = _interopRequireDefault(_tech);\n\nvar _component = require('../component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _dom = require('../utils/dom.js');\n\nvar Dom = _interopRequireWildcard(_dom);\n\nvar _url = require('../utils/url.js');\n\nvar Url = _interopRequireWildcard(_url);\n\nvar _fn = require('../utils/fn.js');\n\nvar Fn = _interopRequireWildcard(_fn);\n\nvar _log = require('../utils/log.js');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _tsml = require('tsml');\n\nvar _tsml2 = _interopRequireDefault(_tsml);\n\nvar _browser = require('../utils/browser.js');\n\nvar browser = _interopRequireWildcard(_browser);\n\nvar _document = require('global/document');\n\nvar _document2 = _interopRequireDefault(_document);\n\nvar _window = require('global/window');\n\nvar _window2 = _interopRequireDefault(_window);\n\nvar _obj = require('../utils/obj');\n\nvar _mergeOptions = require('../utils/merge-options.js');\n\nvar _mergeOptions2 = _interopRequireDefault(_mergeOptions);\n\nvar _toTitleCase = require('../utils/to-title-case.js');\n\nvar _toTitleCase2 = _interopRequireDefault(_toTitleCase);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file html5.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SouceHandlerAdditions\n * @extends Tech\n */\nvar Html5 = function (_Tech) {\n  _inherits(Html5, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Html5(options, ready) {\n    _classCallCheck(this, Html5);\n\n    var _this = _possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    var source = options.source;\n    var crossoriginTracks = false;\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n\n    if (_this.el_.hasChildNodes()) {\n\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n            _this.remoteTextTracks().addTrack_(node.track);\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    // TODO: add text tracks into this list\n    var trackTypes = ['audio', 'video'];\n\n    // ProxyNative Video/Audio Track\n    trackTypes.forEach(function (type) {\n      var elTracks = _this.el()[type + 'Tracks'];\n      var techTracks = _this[type + 'Tracks']();\n      var capitalType = (0, _toTitleCase2['default'])(type);\n\n      if (!_this['featuresNative' + capitalType + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n        return;\n      }\n\n      _this['handle' + capitalType + 'TrackChange_'] = function (e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      };\n\n      _this['handle' + capitalType + 'TrackAdd_'] = function (e) {\n        return techTracks.addTrack(e.track);\n      };\n      _this['handle' + capitalType + 'TrackRemove_'] = function (e) {\n        return techTracks.removeTrack(e.track);\n      };\n\n      elTracks.addEventListener('change', _this['handle' + capitalType + 'TrackChange_']);\n      elTracks.addEventListener('addtrack', _this['handle' + capitalType + 'TrackAdd_']);\n      elTracks.addEventListener('removetrack', _this['handle' + capitalType + 'TrackRemove_']);\n      _this['removeOld' + capitalType + 'Tracks_'] = function (e) {\n        return _this.removeOldTracks_(techTracks, elTracks);\n      };\n\n      // Remove (native) tracks that are not used anymore\n      _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);\n    });\n\n    if (_this.featuresNativeTextTracks) {\n      if (crossoriginTracks) {\n        _log2['default'].warn((0, _tsml2['default'])(_templateObject));\n      }\n\n      _this.handleTextTrackChange_ = Fn.bind(_this, _this.handleTextTrackChange);\n      _this.handleTextTrackAdd_ = Fn.bind(_this, _this.handleTextTrackAdd);\n      _this.handleTextTrackRemove_ = Fn.bind(_this, _this.handleTextTrackRemove);\n      _this.proxyNativeTextTracks_();\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    _this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n    return _this;\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  Html5.prototype.dispose = function dispose() {\n    var _this2 = this;\n\n    // Un-ProxyNativeTracks\n    ['audio', 'video', 'text'].forEach(function (type) {\n      var capitalType = (0, _toTitleCase2['default'])(type);\n      var tl = _this2.el_[type + 'Tracks'];\n\n      if (tl && tl.removeEventListener) {\n        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);\n        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);\n        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);\n      }\n\n      // Stop removing old text tracks\n      if (tl) {\n        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);\n      }\n    });\n\n    Html5.disposeMediaElement(this.el_);\n    // tech will handle clearing of the emulated track list\n    _Tech.prototype.dispose.call(this);\n  };\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0;\n\n    // captures a snapshot of every metadata track's current state\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Html5.prototype.createEl = function createEl() {\n    var el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = _document2['default'].createElement('video');\n\n        // determine if native controls should be used\n        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);\n        var attributes = (0, _mergeOptions2['default'])({}, tagAttributes);\n\n        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        Dom.setElAttributes(el, (0, _obj.assign)(attributes, {\n          id: this.options_.techId,\n          'class': 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      Dom.setAttribute(el, 'preload', this.options_.preload);\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = settingsAttrs.length - 1; i >= 0; i--) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          Dom.setAttribute(el, attr, attr);\n        } else {\n          Dom.removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  };\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    var eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n\n  /**\n   * Add event listeners to native text track events. This adds the native text tracks\n   * to our emulated {@link TextTrackList}.\n   */\n\n\n  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {\n    var tt = this.el().textTracks;\n\n    if (tt) {\n      // Add tracks - if player is initialised after DOM loaded, textTracks\n      // will not trigger addtrack\n      for (var i = 0; i < tt.length; i++) {\n        this.textTracks().addTrack_(tt[i]);\n      }\n\n      if (tt.addEventListener) {\n        tt.addEventListener('change', this.handleTextTrackChange_);\n        tt.addEventListener('addtrack', this.handleTextTrackAdd_);\n        tt.addEventListener('removetrack', this.handleTextTrackRemove_);\n      }\n\n      // Remove (native) texttracks that are not used anymore\n      this.on('loadstart', this.removeOldTextTracks_);\n    }\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `change` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `change` event that caused this to run.\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {\n    var tt = this.textTracks();\n\n    this.textTracks().trigger({\n      type: 'change',\n      target: tt,\n      currentTarget: tt,\n      srcElement: tt\n    });\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `addtrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `addtrack` event that caused this to run.\n   *\n   * @listens TextTrackList#addtrack\n   */\n\n\n  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {\n    this.textTracks().addTrack_(e.track);\n  };\n\n  /**\n   * Handle any {@link TextTrackList} `removetrack` event.\n   *\n   * @param {EventTarget~Event} e\n   *        The `removetrack` event that caused this to run.\n   *\n   * @listens TextTrackList#removetrack\n   */\n\n\n  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {\n    this.textTracks().removeTrack_(e.track);\n  };\n\n  /**\n   * This function removes any {@link AudioTrack}s, {@link VideoTrack}s, or\n   * {@link TextTrack}s that are not in the media elements TrackList.\n   *\n   * @param {TrackList} techTracks\n   *        HTML5 Tech's TrackList to search through\n   *\n   * @param {TrackList} elTracks\n   *        HTML5 media elements TrackList to search trough.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {\n    // This will loop over the techTracks and check if they are still used by the HTML5 media element\n    // If not, they will be removed from the emulated list\n    var removeTracks = [];\n\n    if (!elTracks) {\n      return;\n    }\n\n    for (var i = 0; i < techTracks.length; i++) {\n      var techTrack = techTracks[i];\n      var found = false;\n\n      for (var j = 0; j < elTracks.length; j++) {\n        if (elTracks[j] === techTrack) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        removeTracks.push(techTrack);\n      }\n    }\n\n    for (var _i = 0; _i < removeTracks.length; _i++) {\n      var track = removeTracks[_i];\n\n      techTracks.removeTrack_(track);\n    }\n  };\n\n  /**\n   * Remove {@link TextTrack}s that dont exist in the native track list from our\n   * emulated {@link TextTrackList}.\n   *\n   * @listens Tech#loadstart\n   */\n\n\n  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_(e) {\n    var techTracks = this.textTracks();\n    var elTracks = this.el().textTracks;\n\n    this.removeOldTracks_(techTracks, elTracks);\n  };\n\n  /**\n   * Called by {@link Player#play} to play using the `Html5` `Tech`.\n   */\n\n\n  Html5.prototype.play = function play() {\n    var playPromise = this.el_.play();\n\n    // Catch/silence error when a pause interrupts a play request\n    // on browsers which return a promise\n    if (playPromise !== undefined && typeof playPromise.then === 'function') {\n      playPromise.then(null, function (e) {});\n    }\n  };\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      (0, _log2['default'])(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n\n  Html5.prototype.duration = function duration() {\n    var _this3 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && browser.IS_ANDROID && browser.IS_CHROME) {\n      if (this.el_.currentTime === 0) {\n        // Wait for the first `timeupdate` with currentTime > 0 - there may be\n        // several with 0\n        var checkProgress = function checkProgress() {\n          if (_this3.el_.currentTime > 0) {\n            // Trigger durationchange for genuinely live video\n            if (_this3.el_.duration === Infinity) {\n              _this3.trigger('durationchange');\n            }\n            _this3.off('timeupdate', checkProgress);\n          }\n        };\n\n        this.on('timeupdate', checkProgress);\n        return NaN;\n      }\n    }\n    return this.el_.duration || NaN;\n  };\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The heigth of the HTML5 media element.\n   */\n\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this4 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', { isFullscreen: false });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n\n        this.trigger('fullscreenchange', { isFullscreen: true });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this4.off('webkitbeginfullscreen', beginFn);\n      _this4.off('webkitendfullscreen', endFn);\n    });\n  };\n\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = _window2['default'].navigator && _window2['default'].navigator.userAgent || '';\n\n      // Seems to be broken in Chromium/Chrome && Safari in Leopard\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play();\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(_src);\n  };\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  };\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  };\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to intialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n    var htmlTrackElement = _document2['default'].createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options['default']) {\n      htmlTrackElement['default'] = options['default'];\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (_window2['default'].performance && typeof _window2['default'].performance.now === 'function') {\n      videoPlaybackQuality.creationTime = _window2['default'].performance.now();\n    } else if (_window2['default'].performance && _window2['default'].performance.timing && typeof _window2['default'].performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = _window2['default'].Date.now() - _window2['default'].performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(_tech2['default']);\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\nif (Dom.isReal()) {\n\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = _document2['default'].createElement('video');\n  var track = _document2['default'].createElement('track');\n\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE9 with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (browser.IS_ANDROID && browser.IS_CHROME && browser.CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return browser.IS_ANY_SAFARI;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !browser.IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggred instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggred instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();\n\n// HTML5 Feature detection and Device Fixes --------------------------------- //\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\nvar mp4RE = /^video\\/mp4/i;\n\nHtml5.patchCanPlayType = function () {\n\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  if (browser.ANDROID_VERSION >= 4.0 && !browser.IS_FIREFOX) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n\n    // Override Android 2.2 and less canPlayType method which is broken\n  } else if (browser.IS_OLD_ANDROID) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mp4RE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n};\n\n// by default, patch the media element\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occured during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - Flase indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NEWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n\n/**\n * Get the value of `videoHeight` from the video element. `videoHeigth` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate'].forEach(function (prop) {\n  Html5.prototype['set' + (0, _toTitleCase2['default'])(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n\n_tech2['default'].withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @proprety {Tech~SourceObject} source\n *        The source object\n *\n * @proprety {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE9 on Windows 7 without MediaPlayer throws an error here\n  // https://github.com/videojs/video.js/issues/519\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = Url.getFileExtension(source.src);\n\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n\n_component2['default'].registerComponent('Html5', Html5);\n_tech2['default'].registerTech('Html5', Html5);\nexports['default'] = Html5;\n"]},"metadata":{},"sourceType":"script"}