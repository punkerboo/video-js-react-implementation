{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.throttle = exports.bind = undefined;\n\nvar _guid = require('./guid.js');\n/**\n * Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n * It also stores a unique id on the function so it can be easily removed from events.\n *\n * @param {Mixed} context\n *        The object to bind as scope.\n *\n * @param {Function} fn\n *        The function to be bound to a scope.\n *\n * @param {number} [uid]\n *        An optional unique ID for the function to be set\n *\n * @return {Function}\n *         The new function that will be bound into the context given\n */\n\n\nvar bind = exports.bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = (0, _guid.newGUID)();\n  } // Create the new function that changes the context\n\n\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  }; // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n\n\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n  return bound;\n};\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @param  {Function} fn\n *         The function to be throttled.\n *\n * @param  {Number}   wait\n *         The number of milliseconds by which to throttle.\n *\n * @return {Function}\n */\n\n/**\n * @file fn.js\n * @module fn\n */\n\n\nvar throttle = exports.throttle = function throttle(fn, wait) {\n  var last = Date.now();\n\n  var throttled = function throttled() {\n    var now = Date.now();\n\n    if (now - last >= wait) {\n      fn.apply(undefined, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};","map":{"version":3,"sources":["C:/test_website/ninjasatnoon/node_modules/video.js/es5/utils/fn.js"],"names":["exports","__esModule","throttle","bind","undefined","_guid","require","context","fn","uid","guid","newGUID","bound","apply","arguments","wait","last","Date","now","throttled"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACG,IAAR,GAAeC,SAAlC;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,WAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIH,IAAI,GAAGH,OAAO,CAACG,IAAR,GAAe,SAASA,IAAT,CAAcI,OAAd,EAAuBC,EAAvB,EAA2BC,GAA3B,EAAgC;AACxD;AACA,MAAI,CAACD,EAAE,CAACE,IAAR,EAAc;AACZF,IAAAA,EAAE,CAACE,IAAH,GAAU,CAAC,GAAGL,KAAK,CAACM,OAAV,GAAV;AACD,GAJuD,CAMxD;;;AACA,MAAIC,KAAK,GAAG,SAASA,KAAT,GAAiB;AAC3B,WAAOJ,EAAE,CAACK,KAAH,CAASN,OAAT,EAAkBO,SAAlB,CAAP;AACD,GAFD,CAPwD,CAWxD;AACA;AACA;AACA;AACA;AACA;;;AACAF,EAAAA,KAAK,CAACF,IAAN,GAAaD,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYD,EAAE,CAACE,IAAlB,GAAyBF,EAAE,CAACE,IAA5C;AAEA,SAAOE,KAAP;AACD,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,IAAIV,QAAQ,GAAGF,OAAO,CAACE,QAAR,GAAmB,SAASA,QAAT,CAAkBM,EAAlB,EAAsBO,IAAtB,EAA4B;AAC5D,MAAIC,IAAI,GAAGC,IAAI,CAACC,GAAL,EAAX;;AAEA,MAAIC,SAAS,GAAG,SAASA,SAAT,GAAqB;AACnC,QAAID,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAV;;AAEA,QAAIA,GAAG,GAAGF,IAAN,IAAcD,IAAlB,EAAwB;AACtBP,MAAAA,EAAE,CAACK,KAAH,CAAST,SAAT,EAAoBU,SAApB;AACAE,MAAAA,IAAI,GAAGE,GAAP;AACD;AACF,GAPD;;AASA,SAAOC,SAAP;AACD,CAbD","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.throttle = exports.bind = undefined;\n\nvar _guid = require('./guid.js');\n\n/**\n * Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n * It also stores a unique id on the function so it can be easily removed from events.\n *\n * @param {Mixed} context\n *        The object to bind as scope.\n *\n * @param {Function} fn\n *        The function to be bound to a scope.\n *\n * @param {number} [uid]\n *        An optional unique ID for the function to be set\n *\n * @return {Function}\n *         The new function that will be bound into the context given\n */\nvar bind = exports.bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = (0, _guid.newGUID)();\n  }\n\n  // Create the new function that changes the context\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  };\n\n  // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n\n  return bound;\n};\n\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @param  {Function} fn\n *         The function to be throttled.\n *\n * @param  {Number}   wait\n *         The number of milliseconds by which to throttle.\n *\n * @return {Function}\n */\n/**\n * @file fn.js\n * @module fn\n */\nvar throttle = exports.throttle = function throttle(fn, wait) {\n  var last = Date.now();\n\n  var throttled = function throttled() {\n    var now = Date.now();\n\n    if (now - last >= wait) {\n      fn.apply(undefined, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};\n"]},"metadata":{},"sourceType":"script"}